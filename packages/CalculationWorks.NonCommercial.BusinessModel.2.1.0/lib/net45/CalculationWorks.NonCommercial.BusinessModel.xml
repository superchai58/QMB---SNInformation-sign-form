<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CalculationWorks.NonCommercial.BusinessModel</name>
    </assembly>
    <members>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfCalculationException">
            <summary>
            This exception wraps exception that occur in BcfFunction.Compute() or BcfValidator.Validate().
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException">
            <summary>
            Base class of BcfRelationConstraintException and BcfCalculationException.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified. </param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfCalculationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCalculationException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfCalculationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfCalculationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCalculationException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfCellChangeType">
            <summary>
            Enum BcfCellChangeType
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfCellChangeType.ValueChanged">
            <summary>
            The value has been changed.
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfCellChangeType.ValidationTagsChanged">
            <summary>
            The validation tags have been changed.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException">
            <summary>
            This exception will be thrown when a unique (including primary) or foreign-key constraint cannot be enforced.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified. </param>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException">
            <summary>
            This exception will be thrown when a unique (including primary) or foreign-key constraint cannot be enforced.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified. </param>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException">
            <summary>
            This exception will be thrown when a row with child row relation delete rule 'NoAction'  should be deleted.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified. </param>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfTypeConstraintException">
            <summary>
            This exception will be thrown when a cell should be updated with a value that does not pass the type constraint check.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTypeConstraintException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTypeConstraintException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTypeConstraintException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTypeConstraintException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTypeConstraintException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTypeConstraintException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified. </param>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetColumnBehaviorFactory">
            <summary>
            Dataset behavior item that creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> objects.
            </summary>
            <example>
            <para><conceptualLink target="9e5dab9d-fb02-4f7b-8254-4537c5b556e2"/></para>
            </example>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehaviorItemBase">
            <summary>
            Base class of all <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior"/> items.
            </summary>
            <example>
            <conceptualLink target="64ce4277-6c7d-4cb9-97f3-af5124854d94"/>
            <conceptualLink target="4a162a6d-639f-4b93-8496-9cd01ecd318e"/>
            </example>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehaviorItemBase.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the behavior item belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
            <remarks>The value is <c>null</c> until the behavior item is initialized.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetColumnBehaviorFactory.CreateInstance(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehaviorItemBase})">
            <summary>
            Creates the instance.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <returns>BcfColumnBehavior.</returns>
            <exception cref="T:System.ArgumentNullException">behaviorItems is <c>null</c></exception>
            <remarks>Override this method to create a custom behavior type</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDataSetBehaviorFactory">
            <summary>
            Dataset behavior item that creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior"/> object.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDataSetBehaviorFactory.CreateInstance(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehaviorItemBase})">
            <summary>
            Creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior"/>.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <returns>BcfDataSetBehavior.</returns>
            <exception cref="T:System.ArgumentNullException">behaviorItems is <c>null</c></exception>
            <remarks>Override this method to create a custom behavior type inheriting <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior"/></remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics">
            <summary>
            Class BcfDataSetDiagnostic.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnExceptionCreated(System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Called when an exception is created.
            </summary>
            <param name="ex">The exception.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginCalculating">
            <summary>
            Called when calculating begins.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndCalculating(System.Boolean)">
            <summary>
            Called when calculating ends.
            </summary>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginValidating">
            <summary>
            Called when validation begins.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndValidating(System.Boolean)">
            <summary>
            Called when validation ends.
            </summary>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginCalculatingBucket(System.Int32)">
            <summary>
            Called when begin calculating the next execution plan bucket.
            </summary>
            <param name="bucketIndex">Index of the bucket.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndCalculatingBucket(System.Int32,System.Boolean)">
            <summary>
            Called when calculating the current execution plan bucket ends.
            </summary>
            <param name="bucketIndex">Index of the bucket.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginCalculatingCell(CalculationWorks.NonCommercial.BusinessModel.BcfCell,System.Boolean)">
            <summary>
            Called when begin calculating a cell.
            </summary>
            <param name="cell">The cell.</param>
            <param name="parallel">if set to <c>true</c> operation will be or was executed parallel.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndCalculatingCell(CalculationWorks.NonCommercial.BusinessModel.BcfCell,System.Boolean,System.Boolean)">
            <summary>
            Called when a cell was calculated.
            </summary>
            <param name="cell">The cell.</param>
            <param name="parallel">if set to <c>true</c> operation will be or was executed parallel.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginValidatingCell(CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell,System.Boolean)">
            <summary>
            Called when begin validating a cell.
            </summary>
            <param name="validatorCell">The validator cell.</param>
            <param name="parallel">if set to <c>true</c> operation will be or was executed parallel.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndValidatingCell(CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell,System.Boolean,System.Boolean)">
            <summary>
            Called when a cell was validated.
            </summary>
            <param name="validatorCell">The validator cell.</param>
            <param name="parallel">if set to <c>true</c> operation will be or was executed parallel.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginCreateTransaction(CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder)">
            <summary>
            Called when begins to create a transaction.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndCreateTransaction(CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder,System.Boolean)">
            <summary>
            Called when a transaction was created.
            </summary>
            <param name="builder">The builder.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginCommit(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction)">
            <summary>
            Called when begins to commit a transaction.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndCommit(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction,System.Boolean)">
            <summary>
            Called when a transaction was committed.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginRollback(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction)">
            <summary>
            Called when a transaction rollback begins.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndRollback(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction,System.Boolean)">
            <summary>
            Called when a transaction rollback is done.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginUndo(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction)">
            <summary>
            Called when undo begins.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndUndo(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction,System.Boolean)">
            <summary>
            Called when undo is done.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginRedo(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction)">
            <summary>
            Called when redo begins.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndRedo(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction,System.Boolean)">
            <summary>
            Called when redo is done.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginReleasingEvents">
            <summary>
            Called when begins to releasing deferred events.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndReleasingEvents(System.Boolean)">
            <summary>
            Called when releasing deferred events is done.
            </summary>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnUndoing(CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem)">
            <summary>
            Called just before undoing an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnRedoing(CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem)">
            <summary>
            Called when just before redoing an item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginEventReleaseStart">
            <summary>
            Called before <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart"/>.
            </summary>
            <remarks>The call will be omitted if there is no handler assigned to <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart"/></remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndEventReleaseStart(System.Boolean)">
            <summary>
            Called after <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart"/>.
            </summary>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
            <remarks>The call will be omitted if there is no handler assigned to <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart"/></remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnBeginEventReleaseEnd">
            <summary>
            Called before <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd"/>.
            </summary>
            <remarks>The call will be omitted if there is no handler assigned to <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd"/></remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.OnEndEventReleaseEnd(System.Boolean)">
            <summary>
            Called after <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd"/>.
            </summary>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
            <remarks>The call will be omitted if there is no handler assigned to <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd"/></remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics"/> is enabled. Default is <c>false</c>.
            </summary>
            <value><c>true</c> if enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.ExceptionCreated">
            <summary>
            Occurs when an exception is created.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginCalculating">
            <summary>
            Occurs when calculating begins.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndCalculating">
            <summary>
            Occurs when calculating ends.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginValidating">
            <summary>
            Occurs when validation begins.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndValidating">
            <summary>
            Occurs when validation ends.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginCalculatingBucket">
            <summary>
            Occurs when begin calculating the next execution plan bucket.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndCalculatingBucket">
            <summary>
            Occurs when calculating the current execution plan bucket ends
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginCalculatingCell">
            <summary>
            Occurs when begin calculating a cell.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndCalculatingCell">
            <summary>
            Occurs when a cell was calculated.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginValidatingCell">
            <summary>
            Occurs when begin validating a cell.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndValidatingCell">
            <summary>
            Occurs when a cell was validated.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginCreateTransaction">
            <summary>
            Occurs when begins to create a transaction.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndCreateTransaction">
            <summary>
            Occurs when a transaction was created.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginCommit">
            <summary>
            Occurs when begins to commit a transaction.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndCommit">
            <summary>
            Occurs when a transaction was committed.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginRollback">
            <summary>
            Occurs when a transaction rollback begins.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndRollback">
            <summary>
            Occurs when a transaction rollback is done.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginUndo">
            <summary>
            Occurs when undo begins.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndUndo">
            <summary>
            Occurs when undo is done.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginRedo">
            <summary>
            Occurs when redo begins.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndRedo">
            <summary>
            Occurs when redo is done.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginReleasingEvents">
            <summary>
            Occurs when begins to releasing deferred events.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndReleasingEvents">
            <summary>
            Occurs when releasing deferred events is done.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.Undoing">
            <summary>
            Occurs just before undoing an item.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.Redoing">
            <summary>
            Occurs just before redoing an item.
            </summary>
            <remarks>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginEventReleaseStart">
            <summary>
            Occurs before <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart"/>.
            </summary>
            <remarks>
            <para>The call will be omitted if there is no handler assigned to <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart"/>.</para>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndEventReleaseStart">
            <summary>
            Occurs after <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart"/>.
            </summary>
            <remarks>
            <para>The call will be omitted if there is no handler assigned to <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart"/>.</para>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.BeginEventReleaseEnd">
            <summary>
            Occurs before <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd"/>.
            </summary>
            <remarks>
            <para>The call will be omitted if there is no handler assigned to <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd"/>.</para>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics.EndEventReleaseEnd">
            <summary>
            Occurs after <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd"/>.
            </summary>
            <remarks>
            <para>The call will be omitted if there is no handler assigned to <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd"/>.</para>
            <para>Uncaught exceptions in diagnostics events may cause an invalid dataset state.</para>
            </remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.NamespaceDoc">
            <summary>
            The namespace CalculationWorks.BusinessModel.Behaviors.Diagnostics contains types related to diagnostics behavior see <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetDiagnostics"/>
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ExceptionCreatedEventArgs">
            <summary>
            Class ExceptionCreatedEventArgs.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ExceptionCreatedEventArgs.#ctor(System.Exception,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ExceptionCreatedEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ExceptionCreatedEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ExceptionCreatedEventArgs.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CanceledEventArgs">
            <summary>
            Class CanceledEventArgs.
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CanceledEventArgs.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CanceledEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CanceledEventArgs"/> class.
            </summary>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CanceledEventArgs.Canceled">
            <summary>
            Gets a value indicating whether the operation is canceled.
            </summary>
            <value><c>true</c> if canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculationPlanBucketEventArgs">
            <summary>
            Class CalculationPlanBucketEventArgs.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculationPlanBucketEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculationPlanBucketEventArgs"/> class.
            </summary>
            <param name="bucketIndex">Index of the bucket.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculationPlanBucketEventArgs.BucketIndex">
            <summary>
            Gets the index of the bucket.
            </summary>
            <value>The index of the bucket.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculationPlanBucketEventArgs.Canceled">
            <summary>
            Gets a value indicating whether the operation was canceled.
            </summary>
            <value><c>true</c> if canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculatingCellEventArgs">
            <summary>
            Class CalculatingCellEventArgs.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculatingCellEventArgs.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfCell,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculatingCellEventArgs"/> class.
            </summary>
            <param name="cell">The cell.</param>
            <param name="parallel">if set to <c>true</c> operation will be or was executed parallel.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculatingCellEventArgs.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculatingCellEventArgs.Parallel">
            <summary>
            Gets a value indicating whether the operation will be or was executed parallel.
            </summary>
            <value><c>true</c> if parallel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.CalculatingCellEventArgs.Canceled">
            <summary>
            Gets a value indicating whether the operation was canceled.
            </summary>
            <value><c>true</c> if canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ValidatingCellEventArgs">
            <summary>
            Class ValidatingCellEventArgs.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ValidatingCellEventArgs.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ValidatingCellEventArgs"/> class.
            </summary>
            <param name="cell">The cell.</param>
            <param name="parallel">if set to <c>true</c> operation will be or was executed parallel.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ValidatingCellEventArgs.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ValidatingCellEventArgs.Parallel">
            <summary>
            Gets a value indicating whether the operation will be or was executed parallel.
            </summary>
            <value><c>true</c> if parallel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.ValidatingCellEventArgs.Canceled">
            <summary>
            Gets a value indicating whether the operation was canceled.
            </summary>
            <value><c>true</c> if canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionEventArgs">
            <summary>
            Class TransactionEventArgs.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionEventArgs.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionEventArgs"/> class.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionEventArgs.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionEventArgs.Canceled">
            <summary>
            Gets a value indicating whether the operation was canceled.
            </summary>
            <value><c>true</c> if canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionBuilderEventArgs">
            <summary>
            Class TransactionBuilderEventArgs.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionBuilderEventArgs.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionBuilderEventArgs"/> class.
            </summary>
            <param name="builder">The builder.</param>
            <param name="canceled">if set to <c>true</c> the operation was canceled.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionBuilderEventArgs.TransactionBuilder">
            <summary>
            Gets the transaction builder.
            </summary>
            <value>The transaction builder.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.TransactionBuilderEventArgs.Canceled">
            <summary>
            Gets a value indicating whether the operation was canceled.
            </summary>
            <value><c>true</c> if canceled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.UndoRedoItemEventArgs">
            <summary>
            Class UndoRedoItemEventArgs.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.UndoRedoItemEventArgs.#ctor(CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.UndoRedoItemEventArgs"/> class.
            </summary>
            <param name="undoRedoItem">The undo redo item.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.Diagnostics.UndoRedoItemEventArgs.UndoRedoItem">
            <summary>
            Gets the undo redo item.
            </summary>
            <value>The undo redo item.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions">
            <summary>
            Class BcfDataSetParallelOptions.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions.OnCurrentCancellationTokenSourceChanged">
            <summary>
            Called when current cancellation token source changed.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions.ParallelCalculationEnabled">
            <summary>
            Gets or sets a value indicating whether parallel calculation enabled. Default is <c>false</c>
            </summary>
            <value><c>true</c> if parallel calculation enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions.ParallelValidationEnabled">
            <summary>
            Gets or sets a value indicating whether parallel validation enabled. Default is <c>false</c>
            </summary>
            <value><c>true</c> if parallel validation enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions.Scheduler">
            <summary>
            Gets or sets the <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks.
            </summary>
            <value>The task scheduler; or <c>null</c> if none set</value>
            <remarks>
            If Scheduler is null the default scheduler <see cref="P:System.Threading.Tasks.TaskScheduler.Default"/> will be used in case of parallel calculation.
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions.CurrentCancellationTokenSourceChanged">
            <summary>
            Occurs when current cancellation token source changed.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions.CurrentCancellationTokenSource">
            <summary>
            Gets the current cancellation token source.
            </summary>
            <value>The current cancellation token source; or <c>null</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParameterBehaviorFactory">
            <summary>
            Dataset behavior item that creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior"/> objects.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParameterBehaviorFactory.CreateInstance(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehaviorItemBase})">
            <summary>
            Creates the instance.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <returns>BcfParameterBehavior.</returns>
            <exception cref="T:System.ArgumentNullException">behaviorItems is <c>null</c></exception>
            <remarks>Override this method to create a custom behavior type</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetRelationBehaviorFactory">
            <summary>
            Dataset behavior item that creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehavior"/> objects.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetRelationBehaviorFactory.CreateInstance(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehaviorItemBase})">
            <summary>
            Creates the instance.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <returns>BcfRelationBehavior.</returns>
            <exception cref="T:System.ArgumentNullException">behaviorItems is <c>null</c></exception>
            <remarks>Override this method to create a custom behavior type</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetStateIdBehavior">
            <summary>
            This DataSetBehaviorItem manages time stamping the datasets states.
            </summary>
            <example>
            <conceptualLink target="64ce4277-6c7d-4cb9-97f3-af5124854d94"/>
            </example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetStateIdBehavior.Generate(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction)">
            <summary>
            Generates an id related to datasets state (timestamping)
            </summary>
            <param name="transaction">The transaction.</param>
            <returns>Guid</returns>
            <remarks>
            <para><see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/> will restore the value.</para>
            <para>Base implementation always creates a new identifier.</para>
            <para>Override <c>Generate</c> to return <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetStateIdBehavior.Value"/> if you don't wish to update the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetStateIdBehavior.Value"/>.</para>
            </remarks>
            <example>
            <conceptualLink target="6062ae56-2c31-4c34-87e9-9296a2664dd6"/>
            </example>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetStateIdBehavior.Value">
            <summary>
            Gets the state identifier.
            </summary>
            <value>The state identifier.</value>
            <remarks>
            <para><see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/> will restore the value.</para>
            <para>With base implementation a new identifier will be created each time right before a transaction (not a subtransaction) is committed.</para></remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTableBehaviorFactory">
            <summary>
            Dataset behavior item that creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior"/> objects.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTableBehaviorFactory.CreateInstance(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehaviorItemBase})">
            <summary>
            Creates the instance.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <returns>BcfTableBehavior.</returns>
            <exception cref="T:System.ArgumentNullException">behaviorItems is <c>null</c></exception>
            <remarks>Override this method to create a custom behavior type</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetValidatorBehaviorFactory">
            <summary>
            Dataset behavior item that creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehavior"/> objects.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetValidatorBehaviorFactory.CreateInstance(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehaviorItemBase})">
            <summary>
            Creates the instance.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <returns>BcfValidatorBehavior.</returns>
            <exception cref="T:System.ArgumentNullException">behaviorItems is <c>null</c></exception>
            <remarks>Override this method to create a custom behavior type</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException">
            <summary>
            Class ExternalEventReleaseException.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified. </param>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.NamespaceDoc">
            <summary>
            <para>Behaviors and behavior items are additional objects for special model elements.</para>
            <para>Behavior items can provide additional features to model elements. You can also create custom behavior items to add meta data or modify built-in behavior items overriding their methods. The behavior items can be added with BCF Editor or in code by updating your BcfDatasetSetup before passing it as BcfDataSet constructor parameter.</para>
            <para>A behavior groups behavior items and make them accessible as properties.</para>
            <para>Types using behaviors are:
            <list type="table">
               <listheader><term>Type</term><description>Property</description><description>Property Type</description><description>Property Element Type</description></listheader>
               <item><term><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/></term><description><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Behavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehaviorItemBase"/></description></item>
               <item><term><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/></term><description><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Behavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehaviorItemBase"/></description></item>
               <item><term><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelation"/></term><description><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.Behavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehaviorItemBase"/></description></item>
               <item><term><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumn"/></term><description><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Behavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehaviorItemBase"/></description></item>
               <item><term><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/></term><description><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase.Behavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehaviorItemBase"/></description></item>
               <item><term><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfParameter"/></term><description><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfParameter.Behavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior"/></description><description><see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehaviorItemBase"/></description></item>
            </list>
            </para>
            </summary>
            <example>
            <conceptualLink target="1398e9c2-29b7-4995-b972-f76a87429121"/>
            </example>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Design.NamespaceDoc">
            <summary>
            <para>CalculationWorks.BusinessModel.Design provides types describing model setup.</para>
            <para>
            </para>
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.NamespaceDoc">
            <summary>
            <para>CalculationWorks.BusinessModel.UndoRedo provides types related to Undo-Redo feature.</para>
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.NamespaceDoc">
            <summary>
            <para>CalculationWorks BCF Library provides types and base classes to create smart object models.</para>
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.NamespaceGroupDoc">
            <summary>
            <para>The CalculationWorks.BusinessModel namespace provides access to classes that represent BCF. BCF lets you build smart object models that efficiently manage the most frequent challenges of smart object models:</para>
            <list type="bullet">
            <item><term>Relational Object Model</term><description>BCF supports tables and relations.</description></item>
            <item><term>Transaction Processing</term><description>Data updates on BCF models are executed transactional.</description></item>
            <item><term>Undo and Redo</term><description>BCF comes with built-in undo/redo support.</description></item>
            <item><term>Computed Properties/Columns</term><description> BCF supports custom functions. So the whole .net-world can be used to compute a value. BCF also supports custom validators. Use function like objects to compute data error info. A list of all active data error info is also maintained. </description></item>
            <item><term>Change Notification</term><description>Get events when data is updated - also on computed properties and data errors.</description></item>
            </list>
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException">
            <summary>
            Represents a fatal exception when undo or redo operations fail.
            </summary>
            <remarks>
            When this exception is thrown the model is invalid an can not be restored.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException"/> class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified. </param>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfMandatoryAttribute">
            <summary>
            Properties decorated with this attribute will appear as mandatory in the editor. This class cannot be inherited.
            </summary>
            <remarks>Properties decorated with this attribute will appear as mandatory in the editor.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1">
            <summary>
            Read only base class for model collections.
            </summary>
            <typeparam name="T">Item type of the collection</typeparam>
            <remarks>The collection is case-sensitive when it searches for keys.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1"/> class.
            </summary>
            <param name="innerCollection">The inner collection.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the collection contains an element with the specified key; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">key is <c>null</c></exception>
            <remarks>The collection is case-sensitive when it searches for keys.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1.ContainsKey(System.String)">
            <summary>
            Determines whether the collection contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the collection contains the specified key; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">key is <c>null</c></exception>
            <remarks>The collection is case-sensitive when it searches for keys.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1.ContainsValue(`0)">
            <summary>
            Determines whether the collection contains the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the collection contains the specified value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1.Item(System.String)">
            <summary>
            Gets the item with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>T.</returns>
            <exception cref="T:System.ArgumentNullException">key is <c>null</c></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">key not in collection</exception>
            <remarks>The collection is case-sensitive when it searches for keys.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>T.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Index out of bounds.</exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfReadOnlyModelObjectCollection`1.Count">
            <summary>
            Gets the number of elements contained in the Collection.
            </summary>
            <value>The number of elements contained in the Collection.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowBuilder">
            <summary>
            Infrastructure. The BcfRowBuilder type supports the infrastructure and is not intended to be used directly from your code. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRowBuilder.Table">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/> the BcfRowBuilder belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRowBuilder.DefaultValues">
            <summary>
            Gets the default values.
            </summary>
            <value>The default values.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRowBuilder.Values">
            <summary>
            Gets the values. One for each column.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollectionChangeType">
            <summary>
            Enum BcfRowCollectionChangeType
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollectionChangeType.Add">
            <summary>
            A row was added.
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollectionChangeType.Remove">
            <summary>
            A row was removed.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowState">
            <summary>
            Enum BcfRowState
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.Created">
            <summary>
            The row is created but not yet in the table.
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.Valid">
            <summary>
            The row is added to the tables row collection.
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.UndoneAdded">
            <summary>
            The row was already added to the table, but adding was undone.
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.Deleting">
            <summary>
            The row is currently processing <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.Delete(System.Boolean)"/>.
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.Deleted">
            <summary>
            The row is deleted.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfTableBuilder">
            <summary>
            Infrastructure. The BcfTableBuilder type supports the infrastructure and is not intended to be used directly from your code. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder">
            <summary>
            Helper class, providing additional data to the BcfTransactionFactory.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder"/> class.
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.UpdateCell">
            <summary>
            Gets or sets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/> that should be updated.
            </summary>
            <value>The update cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.UpdateRelatedRowCell">
            <summary>
            Gets or sets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell"/> that should be updated.
            </summary>
            <value>The update related row cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.UpdateRelatedRowsCell">
            <summary>
            Gets or sets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell"/> that should be updated.
            </summary>
            <value>The update related rows cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.NewParentRow">
            <summary>
            Gets or sets the new parent row.
            </summary>
            <value>The new parent row.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.AddChildRow">
            <summary>
            Gets or sets the child row to add.
            </summary>
            <value>The add child row.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.RemoveChildRow">
            <summary>
            Gets or sets the child row to remove.
            </summary>
            <value>The remove child row.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.Row">
            <summary>
            Gets or sets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/> that should be updated.
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.Reason">
            <summary>
            Gets the reason.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the builder belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.BuildSubTransaction">
            <summary>
            Gets or sets a value indicating whether the transaction to build is a subtransaction.
            </summary>
            <value><c>true</c> if transaction will be a subtransaction; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.AutoRollback">
            <summary>
            Gets or sets a value indicating whether the transaction will automatic <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/> when <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Commit"/> fails. Default is <c>true</c>.
            </summary>
            <value><c>true</c> if automatic rollback; otherwise, <c>false</c>.</value>
            <remarks>Implicit created transactions will enforce auto rollback <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.EnforceAutoRollback"/>.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder.EnforceAutoRollback">
            <summary>
            Gets a value indicating whether automatic rollback will be enforced.
            </summary>
            <value><c>true</c> if automatic rollback will be enforced; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason">
            <summary>
            Enum BcfTransactionCreationReason
            </summary>
            <remarks>
            To provide extra data to the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> constructor, consider to create a custom transaction builder (<see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder"/> is not sealed).
            </remarks>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason.Unknown">
            <summary>
            unknown
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason.AddRow">
            <summary>
            add row
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason.DeleteRow">
            <summary>
            delete row
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason.CellUpdate">
            <summary>
            cell update
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason.SetParentRow">
            <summary>
            set parent row
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason.AddChildRow">
            <summary>
            add child row
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfTransactionCreationReason.RemoveChildRow">
            <summary>
            remove child row
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase">
            <summary>
            Base class of all custom validators
            </summary>
            <example>
            <para><conceptualLink target="8ee53a32-80ac-42e8-a1cc-1c6b95f8fcdc"/></para>
            <para><conceptualLink target="47a59f0c-e07e-4b62-be48-e97efd49ad82"/></para>
            </example>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal">
            <summary>
            Infrastructure. The type supports the infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.op_Equality(CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal,System.Object)">
            <summary>
            Overloads the == operator.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>The result of the operator (same as <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>).</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.op_Inequality(CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal,System.Object)">
            <summary>
            Overloads the != operator.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>The result of the operator (same as !<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>).</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.Table">
            <summary>
            Gets the table the function or validator belongs to.
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.CanExecuteParallel">
            <summary>
            Gets a value indicating whether this instance can be executed parallel. Default is <c>true</c>.
            </summary>
            <value><c>true</c> if this instance can be execute parallel; otherwise, <c>false</c>.</value>
            <remarks>
            <para>A function is computed parallel if enabled in datasets <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions"/> and <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.CanExecuteParallel"/> and <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.AllowExecuteParallel"/> are <c>true</c>.</para>
            </remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.AllowExecuteParallel">
            <summary>
            Gets or sets a value indicating whether this instance is allowed to be executed parallel.
            </summary>
            <value><c>true</c> if is allowed to be executed parallel; otherwise, <c>false</c>.</value>
            <remarks>A function is computed parallel if enabled in datasets <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParallelOptions"/> and <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.CanExecuteParallel"/> and <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.AllowExecuteParallel"/> are <c>true</c>.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.LongRunning">
            <summary>
            Gets a value indicating whether this is a long running function. Default is <c>false</c>.
            </summary>
            <value><c>true</c> if long running; otherwise, <c>false</c>.</value>
            <remarks><see cref="F:System.Threading.Tasks.TaskCreationOptions.LongRunning"/></remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.CurrentRow">
            <summary>
            Gets the current row.
            </summary>
            <value>The current row. When not calculating CurrentRow return <c>null</c></value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal.Parameters">
            <summary>
            Gets the parameters(not the values). During calculating the values are stored in the associated properties.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase.Validate">
            <summary>
            Executes the Validator.
            </summary>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage"/> with a validation description or <c>null</c> if nothing to describe.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase.Behavior">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehavior"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehavior"/>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollectionChangeAction">
            <summary>
            Enum BcfValidatorResultCollectionChangeAction
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollectionChangeAction.Insert">
            <summary>
            The insert
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollectionChangeAction.Remove">
            <summary>
            The remove
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollectionChangeAction.Update">
            <summary>
            The update
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollectionChangedEventArgs">
            <summary>
            Class BcfValidatorResultCollectionChangedEventArgs.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollectionChangedEventArgs.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollectionChangedEventArgs.ValidatorResult">
            <summary>
            Gets the validator result.
            </summary>
            <value>The validator result.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResult">
            <summary>
            Represents an validator output.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResult.GetCellsTagged">
            <summary>
            Gets the tagged cells.
            </summary>
            <returns>IEnumerable&lt;BcfCell&gt;.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResult.CellContent">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent"/>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollection">
            <summary>
            Collection of validator results.
            </summary>
            <remarks>
            The order of the contained items is not reliable and may be changed by <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>, <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollection.Contains(CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell)">
            <summary>
            Determines whether the collection contains the specified address.
            </summary>
            <param name="address">The address.</param>
            <returns><c>true</c> if the collection contains the specified address; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">address is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollection.Contains(CalculationWorks.NonCommercial.BusinessModel.BcfRow,CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase)">
            <summary>
            Determines whether the collection contains the specified address.
            </summary>
            <param name="validatingRow">The validating row.</param>
            <param name="validator">The validator.</param>
            <returns><c>true</c> if the collection contains the specified address; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            validatingRow is <c>null</c>
            or
            validator is <c>null</c>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollection.GetResult(CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResult"/> for the address.
            </summary>
            <param name="address">The address.</param>
            <returns>BcfValidatorResult or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">address is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollection.GetResult(CalculationWorks.NonCommercial.BusinessModel.BcfRow,CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResult"/> for the address.
            </summary>
            <param name="validatingRow">The validating row.</param>
            <param name="validator">The validator.</param>
            <returns>BcfValidatorResult or <c>null</c>.</returns>
            <exception cref="T:System.ArgumentNullException">
            validatingRow is <c>null</c>
            or
            validator is <c>null</c>
            </exception>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollection.ValidatorCellContentCollectionChanged">
            <summary>
            Occurs when the validator information collection changed. This event is deferred until the last <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is committed.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehaviorItemBase">
            <summary>
            Base class of all <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> items.
            </summary>
            <example>
            <para><conceptualLink target="67a99ab6-9de7-4221-a458-2dfadd69f6f3"/></para>
            <para><conceptualLink target="396d1d8c-0e28-4653-a282-e51abc4ab9c1"/></para>
            <para><conceptualLink target="086c2d5a-6d31-4a38-b6b4-0baad719fd5e"/></para>
            <para><conceptualLink target="9e5dab9d-fb02-4f7b-8254-4537c5b556e2"/></para>
            <para><conceptualLink target="d2763150-69fd-4d23-a4fc-fe5a29c4e1bd"/></para>
            </example>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueSourceBase`1"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueSource`1"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueFunction`1"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnNotNullConstraint"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnType"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnTypeConstraint`1"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter"/>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehaviorItemBase.Column">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumn"/> the item belongs to.
            </summary>
            <value>The column.</value>
            <remarks>The value is <c>null</c> until the behavior item is initialized.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueFunction`1">
            <summary>
            Column behavior item to provide dynamic default values for an individual column. This class cannot be inherited.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <example>
            <para>In this example a column will be provided with an unique default value generator.</para>
            <c>
            BcfColumnSetup columnSetup = myTableSetup.Columns["myColumnName"];<br/>
            columnSetup.BehaviorItems.Add(new BcfColumnDefaultValueFunction&lt;Guid&gt;() { DefaultValueFunction = () =&gt; Guid.NewGuid() });
            </c>
            </example>
            <remarks>
            <para>The property <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueFunction`1.DefaultValueFunction"/> can be updated at runtime.</para>
            <para>To apply a IBcfColumnDefaultValueSource instance to a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> add it to the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/>.<see cref="P:CalculationWorks.BusinessModel.Design.BcfColumnSetup.BehaviorItems"/>.</para>
            <para>Only one IBcfColumnDefaultValueSource instance per <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> allowed.</para>
            </remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueSourceBase`1">
            <summary>
            The column behavior item base class for column default value sources.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <example>
            <para>In this example a default value source class will be created. The class return always a new <see cref="T:System.Guid"/> and cannot be changed at runtime.</para>
            <c>
            public class GuidSequencer : BcfColumnDefaultValueSourceBase&lt;Guid&gt; {<br/>
               protected override Guid GetDefaultValue() { return Guid.NewGuid(); }<br/>
            }
            </c>
            </example>
            <remarks>
            <para>To apply a IBcfColumnDefaultValueSource instance to a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> add it to the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.BehaviorItems"/>.</para>
            <para>Only one IBcfColumnDefaultValueSource instance per <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> allowed.</para>
            </remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnDefaultValueSource">
            <summary>
            Interface for column behavior items that provide default values for an individual column. 
            </summary>
            <remarks>
            <para>To apply a IBcfColumnDefaultValueSource instance to a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> add it to the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.BehaviorItems"/>.</para>
            <para>Only one IBcfColumnDefaultValueSource instance per <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> allowed.</para>
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnDefaultValueSource.GetDefaultValue">
            <summary>
            Provides the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumn"/>s default value for a new <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/>
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueSourceBase`1.GetDefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueFunction`1.GetDefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueFunction`1.DefaultValueFunction">
            <summary>
            Gets or sets the default value function.
            </summary>
            <value>The default value function.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueSource`1">
            <summary>
            Column behavior item to provide default values for an individual column. This class cannot be inherited.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <example>
            <para>In this example a default value source will be added to a column. The default value source will always return the same empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> of string.</para>
            <c>
            BcfColumnSetup columnSetup = myTableSetup.Columns["myColumnName"];<br/>
            columnSetup.BehaviorItems.Add(new BcfColumnDefaultValueSource&lt;Guid&gt;() { Value = new ReadOnlyCollection&lt;string&gt;(new string[] { }) });
            </c>
            </example>
            <remarks>
            <para>The property <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueSource`1.Value"/> can be updated at runtime.</para>
            <para>To apply a IBcfColumnDefaultValueSource instance to a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> add it to the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/>.<see cref="P:BcfColumnSetup.BehaviorItems"/>.</para>
            <para>Only one IBcfColumnDefaultValueSource instance per <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> allowed.</para>
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueSource`1.GetDefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnDefaultValueSource`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnTypeConstraint`1">
            <summary>
            Column behavior item that defines a type constraint for an individual column. This class cannot be inherited.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <example>
            <para><conceptualLink target="67a99ab6-9de7-4221-a458-2dfadd69f6f3"/></para>
            </example>
            <remarks>
            <para>Multiple instances of IBcfColumnTypeConstraint are allowed for an individual <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/>.</para>
            </remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnTypeConstraint">
            <summary>
            Interface for column behavior items that checks values immediately before they are written into the cells value property.
            </summary>
            <remarks>
            <para>To apply a IBcfColumnTypeConstraint instance to a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> add it to the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.BehaviorItems"/>.</para>
            <para>Multiple instances of IBcfColumnTypeConstraint are allowed for an individual <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/>.</para>
            </remarks>
            <example>
            <para><conceptualLink target="67a99ab6-9de7-4221-a458-2dfadd69f6f3"/></para>
            </example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnTypeConstraint.IsValid(System.Object)">
            <summary>
            Determines whether the specified value is valid.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is valid; otherwise, <c>false</c>.</returns>
            <remarks>
            <para>The method is called immediately when a value is written into a cell. Return <c>false</c> to prevent setting the value.</para>
            <para>If value is <c>null</c> IsValid should always return <c>true</c>. Null value should be rejected by the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnNotNullConstraint"/> only.</para>
            <para>If IsValid() returns false an <see cref="T:System.ArgumentException"/> will be thrown. The <see cref="P:System.ArgumentException.Message"/> property will also contain the IBcfColumnTypeConstraint objects <see cref="M:System.Object.ToString"/> result.</para>
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnTypeConstraint`1.IsValid(System.Object)">
            <summary>
            Determines whether the specified value is valid.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnValueConverter">
            <summary>
            Interface for column behavior items that covert a value before it will be written into the cells value property.
            </summary>
            <example>
            <para><conceptualLink target="396d1d8c-0e28-4653-a282-e51abc4ab9c1"/></para>
            </example>
            <remarks>
            <para>To apply a IBcfColumnTypeConstraint instance to a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> add it to the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.BehaviorItems"/>.</para>
            <para>Only one IBcfColumnTypeConstraint instance per <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> allowed.</para>
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnValueConverter.ConvertValue(System.Object)">
            <summary>
            Converts the value.
            </summary>
            <param name="value">The value.</param>
            <returns>System.Object.</returns>
            <remarks>The method is called immediately before a value is written into a cell. Input and calculated values passes this method.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterArraySetter`2">
            <summary>
            Parameter behavior item to set parameter value arrays. This class cannot be inherited.
            </summary>
            <typeparam name="TFunction">The type of the function.</typeparam>
            <typeparam name="TPropertyElement">The type of the property element.</typeparam>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehaviorItemBase">
            <summary>
            Base class of all <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior"/> items.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehaviorItemBase.Parameter">
            <summary>
            Gets the parameter.
            </summary>
            <value>The parameter.</value>
            <remarks>The value is <c>null</c> until the behavior item is initialized.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfParameterSetter">
            <summary>
            Interface for parameter behavior items to update a function or validator parameter property.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfParameterSetter.SetValue(System.Object,CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal)">
            <summary>
            Updates the parameter property.
            </summary>
            <param name="value">The value.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterArraySetter`2.#ctor(System.Action{`0,`1[]})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterArraySetter`2"/> class.
            </summary>
            <param name="setAction">The set action to update function or validator property.</param>
            <exception cref="T:System.ArgumentNullException">setAction is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterArraySetter`2.SetValue(System.Object,CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal)">
            <summary>
            Updates the parameter property by executing the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterArraySetter`2.SetAction"/>
            </summary>
            <param name="value">The value.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterArraySetter`2.SetAction">
            <summary>
            Gets the set action to update function or validator property.
            </summary>
            <value>The set action to update function or validator property.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSetter`2">
            <summary>
            Parameter behavior item to set parameter values.
            </summary>
            <typeparam name="TFunction">The type of the function.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSetter`2.#ctor(System.Action{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSetter`2"/> class.
            </summary>
            <param name="setAction">The set action.</param>
            <exception cref="T:System.ArgumentNullException">setAction is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSetter`2.SetValue(System.Object,CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBaseInternal)">
            <summary>
            Updates the parameter property by executing the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSetter`2.SetAction"/>
            </summary>
            <param name="value">The value.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSetter`2.SetAction">
            <summary>
            Gets the set action to update function or validator property.
            </summary>
            <value>The set action to update function or validator property.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSource`1">
            <summary>
            Generic parameter behavior item base class to provide default values to function or validator parameter properties.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSourceBase`1">
            <summary>
            Non generic parameter behavior item base class to provide default values to function or validator parameter properties.
            </summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfParameterValueSource">
            <summary>
            Interface for parameter behavior items to provide default values to function or validator parameter properties.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfParameterValueSource.GetParameterValue">
            <summary>
            Gets the parameter value to be set.
            </summary>
            <returns>System.Object.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSourceBase`1.GetParameterValue">
            <summary>
            Gets the parameter value to be set.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSource`1.GetParameterValue">
            <summary>
            Gets the parameter value to be set.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterValueSource`1.Value">
            <summary>
            Gets or sets the parameter value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehaviorItemBase">
            <summary>
            Base class of all <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehavior"/> items.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehaviorItemBase.Relation">
            <summary>
            Gets the relation.
            </summary>
            <value>The relation.</value>
            <remarks>The value is <c>null</c> until the behavior item is initialized.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehaviorItemBase">
            <summary>
            Base class of all <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior"/> items.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehaviorItemBase.Table">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/> the item belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/>.</value>
            <remarks>The value is <c>null</c> until the behavior item is initialized.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTablePrimaryKey">
            <summary>
            Table behavior item to add primary key features to a table. This class cannot be inherited.
            </summary>
            <remarks>
            At beginning and end of any transaction or subtransaction the constraint will be enforced. You can also call <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.EnforceRelationConstraints"/>. Within a transaction the primary key constraint can be temporary violated.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTablePrimaryKey.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTablePrimaryKey"/> class.
            </summary>
            <param name="columnNames">The column names.</param>
            <exception cref="T:System.ArgumentNullException">columnNames is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">empty array is not valid;columnNames</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTablePrimaryKey.Find(System.Object[])">
            <summary>
            Finds the specified values.
            </summary>
            <param name="values">The values.</param>
            <returns>BcfRow[].</returns>
            <exception cref="T:System.ArgumentNullException">values is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">number of values must match the number of columns;values</exception>
            <remarks>Within a transaction the primary key constraint can be violated. So the method may return more then one row.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTablePrimaryKey.Columns">
            <summary>
            Gets the key columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehavior">
            <summary>
            Represents the behavior for an individual <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/>.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfBehavior`1">
            <summary>
            Base class of all built-in behaviors.
            </summary>
            <typeparam name="T">The behaviors item type.</typeparam>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfBehavior`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <exception cref="T:System.ArgumentNullException">behaviorItems is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfBehavior`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfBehavior`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehavior.#ctor(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehaviorItemBase})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehavior"/> class.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <exception cref="T:System.ArgumentNullException">validatorSetup is <c>null</c></exception>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehaviorItemBase">
            <summary>
            Base class of all <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehavior"/> items.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfValidatorBehaviorItemBase.Validator">
            <summary>
            Gets the validator.
            </summary>
            <value>The validator.</value>
            <remarks>The value is <c>null</c> until the behavior item is initialized.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup">
            <summary>
            Represents the setup for an individual validator.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.#ctor(CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup"/> class.
            </summary>
            <param name="tableSetup">The table setup.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.AddParameter(System.String)">
            <summary>
            Adds a new parameter to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.Parameters"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup"/>
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>BcfParameterSetup.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.AddParameter(System.String,System.String)">
            <summary>
            Adds a new parameter to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.Parameters"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup"/>
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="accessPath">The access path.</param>
            <returns>A new BcfParameterSetup instance.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.AddParameter(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new parameter to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.Parameters"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup"/>
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="accessPath">The access path.</param>
            <param name="tagCells">if set to <c>true</c> cells will be tagged with the validators result; otherwise not.</param>
            <returns>A new BcfParameterSetup instance.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.ValidatorType">
            <summary>
            Gets the type of the validator.
            </summary>
            <value>The type of the validator.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.Parameters">
            <summary>
            Gets the parameters. See also <conceptualLink target="6aa11df5-af86-4882-a41a-ccc104917882#ParametersTable" />
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.BehaviorItems">
            <summary>
            Gets the behavior items.
            </summary>
            <value>The behavior items.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup.AllowExecuteParallel">
            <summary>
            Gets or sets a value indicating whether parallel execute is allowed.
            </summary>
            <value><c>true</c> if parallel execute is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.IBcfModelObject">
            <summary>
            Interface IBcfModelObject
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.IBcfModelObject.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1">
            <summary>
            Base class for model collections.
            </summary>
            <typeparam name="T">Item type of the collection</typeparam>
            <remarks>The collection is case-sensitive when it searches for keys.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1"/> class.
            </summary>
            <param name="initialCount">The initial count.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1"/> class.
            </summary>
            <param name="items">The items.</param>
            <exception cref="T:System.ArgumentNullException">items is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1.GetKeyForItem(`0)">
            <summary>
            Gets the key for item.
            </summary>
            <param name="item">The item.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfModelObjectCollection`1.TryGetValue(System.String,`0@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the collection contains an element with the specified key; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">key is <c>null</c></exception>
            <remarks>The collection is case-sensitive when it searches for keys.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemStateId">
            <summary>
            Class stores information about an StateId update. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem">
            <summary>
            Interface for compensation objects (undo redo items)
            </summary>
            <remarks>
            When implementing make sure, the methods never causes an exception.
            Throwing an exception inside <see cref="M:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem.Undo"/> or <see cref="M:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem.Redo"/> will cause a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException"/> or <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException"/>. As a result the model corrupted.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem.Undo">
            <summary>
            Restores the original state
            </summary>
            <remarks>
            When implementing make sure, the method never causes an exception.
            Throwing an exception inside the Method will cause a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException"/> or <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException"/>. As a result the model corrupted.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem.Redo">
            <summary>
            Restores the modified state
            </summary>
            <remarks>
            When implementing make sure, the method never causes an exception.
            Throwing an exception inside the Method will cause a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException"/>. As a result the model corrupted.
            </remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemStateId.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the item belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemStateId.OldStateId">
            <summary>
            Gets the old state identifier.
            </summary>
            <value>The old state identifier.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemStateId.NewStateId">
            <summary>
            Gets the new state identifier.
            </summary>
            <value>The new state identifier.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultAdded">
            <summary>
            Class stores information about an validation result add action. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultAdded.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultAdded.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the item belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultRemoved">
            <summary>
            Class stores information about an validation result remove action. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultRemoved.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultRemoved.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the item belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent">
            <summary>
            Represents an individual validator result on a validator cell. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent.Message">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent.ValidatorCell">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell"/>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage">
            <summary>
            Return value of a validators Validate() function.
            </summary>
            <remarks>
            Inheritors who add properties must override <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage.Equals(System.Object)"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage.GetHashCode"/> in order to avoid unexpected results.
            </remarks>
            <example>
            <para><conceptualLink target="8ee53a32-80ac-42e8-a1cc-1c6b95f8fcdc"/></para>
            </example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="formatParameters">The format parameters.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage.FormatString">
            <summary>
            Gets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorMessage.FormatParameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior">
            <summary>
            Represents the behavior for an individual <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumn"/>.
            </summary>
            <example>
            <para><conceptualLink target="9e5dab9d-fb02-4f7b-8254-4537c5b556e2"/></para>
            </example>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehaviorItemBase"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnDefaultValueSource"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnTypeConstraint"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfColumnValueConverter"/>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.#ctor(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehaviorItemBase})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> class.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <exception cref="T:System.ArgumentNullException">columnSetup is <c>null</c></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.DefaultValueSource">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> default value source.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> default value source if specified; else <c>null</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.ValueConverter">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> converter.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> converter if specified; else <c>null</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.Setter">
            <summary>
            Gets the column setter.
            Setters can be used to intercept and/or redirect writes on the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> property.
            </summary>
            <value>The column setter.</value>
            <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter"/>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.ColumnTypeConstraints">
            <summary>
            Gets the column type constraints.
            </summary>
            <value>The column type constraints. If no defined an empty array</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.DataType">
            <summary>
            Gets the internal <see cref="T:System.Type"/> of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/>.
            When <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.PropertyType"/> is <see cref="T:System.Nullable"/> DataType is the generic argument.
            When PropertyType is <c>int?</c> DataType will be <c>int</c>
            </summary>
            <value>The internal <see cref="T:System.Type"/> of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.AllowNull">
            <summary>
            Gets a value indicating whether <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> can be null.
            </summary>
            <value><c>true</c> if <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> can be <c>null</c>; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.PropertyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> property.
            When <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.PropertyType"/> is <see cref="T:System.Nullable"/> DataType is the generic argument.
            When PropertyType is <c>int?</c> DataType will be <c>int</c>
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> property.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior">
            <summary>
            Represents the behavior for an individual <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.#ctor(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehaviorItemBase})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior"/> class.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <exception cref="T:System.ArgumentNullException">dataSetSetup is <c>null</c></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.TransactionFactory">
            <summary>
            Gets the transaction factory.
            </summary>
            <value>The transaction factory.</value>
            <remarks>If no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTransactionFactory"/> is specified in <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.BehaviorItems"/> a default will be created.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.UndoRepository">
            <summary>
            Gets the undo repository.
            </summary>
            <value>The undo repository; or <c>null</c> if none provided.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.TableFactory">
            <summary>
            Gets the table factory.
            </summary>
            <value>The table factory.</value>
            <remarks>If no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTableFactory"/> is specified in <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.BehaviorItems"/> a default will be created.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.TableBehaviorFactory">
            <summary>
            Gets the table behavior factory.
            </summary>
            <value>The table behavior factory.</value>
            <remarks>If no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTableBehaviorFactory"/> is specified in <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.BehaviorItems"/> a default will be created.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.ColumnBehaviorFactory">
            <summary>
            Gets the column behavior factory.
            </summary>
            <value>The column behavior factory.</value>
            <remarks>If no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetColumnBehaviorFactory"/> is specified in <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.BehaviorItems"/> a default will be created.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.ValidatorBehaviorFactory">
            <summary>
            Gets the validator behavior factory.
            </summary>
            <value>The validator behavior factory.</value>
            <remarks>If no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetValidatorBehaviorFactory"/> is specified in <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.BehaviorItems"/> a default will be created.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.ParameterBehaviorFactory">
            <summary>
            Gets the parameter behavior factory.
            </summary>
            <value>The parameter behavior factory.</value>
            <remarks>If no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetParameterBehaviorFactory"/> is specified in <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.BehaviorItems"/> a default will be created.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.RelationBehaviorFactory">
            <summary>
            Gets the relation behavior factory.
            </summary>
            <value>The relation behavior factory.</value>
            <remarks>If no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetRelationBehaviorFactory"/> is specified in <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.BehaviorItems"/> a default will be created.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.StateIdItem">
            <summary>
            Gets the instance managing a state identifier.
            </summary>
            <value>The instance managing a state identifier; or <c>null</c> if none provided.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.Diagnostics">
            <summary>
            Gets the diagnostic item.
            </summary>
            <value>The diagnostic item; or <c>null</c> if none provided.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.ParallelOptions">
            <summary>
            Gets the parallel options item.
            </summary>
            <value>The parallel options item; or <c>null</c> if none provided.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnType">
            <summary>
            Column behavior item that defines the column value type of an individual column.
            </summary>
            <remarks>
            <para>Only one BcfColumnType instance per <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> allowed.</para>
            <para>If the specified type will be reflected on the columns behavior as <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.PropertyType"/>. If property type is a <see cref="T:System.Nullable`1"/> the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.DataType"/> will be set to the type argument.</para>
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnType"/> class.
            </summary>
            <param name="propertyType">Type of the property.</param>
            <exception cref="T:System.ArgumentNullException">propertyType is <c>null</c></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnType.PropertyType">
            <summary>
            Gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfParameter">
            <summary>
            Represents an assigned parameter property of a function or validator object. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfParameter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfParameter.Behavior">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfParameter.ValidatorBase">
            <summary>
            Gets the validator, if the parameter is a validator parameter.
            </summary>
            <value>The validator or <c>null</c> if the parameter is not a validator parameter.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfParameter.FunctionBase">
            <summary>
            Gets the function, if the parameter is a function parameter.
            </summary>
            <value>The function or <c>null</c> if the parameter is not a function parameter.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfParameter.Name">
            <summary>
            Gets the parameters name. Usually the same as the property name.
            </summary>
            <value>The parameter name.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfParameter.SourceColumn">
            <summary>
            Gets the source column.
            </summary>
            <value>The source column.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfParameter.TagCells">
            <summary>
            Gets a value indicating whether cells will be tagged.
            </summary>
            <value><c>true</c> if cells will be tagged; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnNotNullConstraint">
            <summary>
            Column behavior item to disallow null value in columns. This class cannot be inherited.
            </summary>
            <remarks>
            A column with a NotNullConstraint will not accept null values. It is recommended to add this constraint to all column with a structure as <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior.PropertyType"/> to avoid unexpected behavior.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnNotNullConstraint.IsValid(System.Object)">
            <summary>
            Determines whether the specified value is valid.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if the specified value is valid; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior">
            <summary>
            Represents the behavior for an individual <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfParameter"/>.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior.#ctor(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehaviorItemBase})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior"/> class.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <exception cref="T:System.ArgumentNullException">parameterSetup is <c>null</c></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior.ParameterSetter">
            <summary>
            Gets the parameter setter.
            </summary>
            <value>The parameter setter.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfParameterBehavior.ParameterValueSource">
            <summary>
            Gets the parameter value source.
            </summary>
            <value>The parameter value source.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehavior">
            <summary>
            Represents the behavior for an individual <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelation"/>.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehavior.#ctor(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehaviorItemBase})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehavior"/> class.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <exception cref="T:System.ArgumentNullException">relationSetup is <c>null</c></exception>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior">
            <summary>
            Represents the behavior for an individual <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/>.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior.#ctor(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehaviorItemBase})">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior"/> class.
            </summary>
            <param name="behaviorItems">The behavior items.</param>
            <exception cref="T:System.ArgumentNullException">tableSetup is <c>null</c></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior.PrimaryKey">
            <summary>
            Gets the primary key.
            </summary>
            <value>The primary key.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTableFactory">
            <summary>
            Dataset behavior item that creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/> objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTableFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTableFactory"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTableFactory.Register(System.String,System.Func{CalculationWorks.NonCommercial.BusinessModel.BcfTableBuilder,CalculationWorks.NonCommercial.BusinessModel.BcfTable})">
            <summary>
            Registers the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="tableConstructor">The table constructor.</param>
            <exception cref="T:System.ArgumentNullException">tableName is <c>null</c></exception>
            <exception cref="T:System.ArgumentNullException">tableConstructor is <c>null</c></exception>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction">
            <summary>
            Represents a transaction.
            </summary>
            <remarks>
            <para>
            Any update operation on a data object is wrapped in a transaction. Setting a value or adding a row will create a transaction, execute the operation and commit the transaction.
            Before every begin and end of any transaction or subtransaction the outstanding calculations and validations will be processed.
            To improve performance and get a nice undo repository when more than one cell update is required, it is recommended to use transactions explicit. Begin a try-block immediately after the transaction is created. The transaction
            commit should always be the last instruction inside the try-block. Rollback failed transactions.
            </para>
            </remarks>
            <example>
            <para><conceptualLink target="747d7275-202e-4d65-939f-bd66574fd739"/></para>
            <para>How to use a custom transaction class see: <conceptualLink target="6062ae56-2c31-4c34-87e9-9296a2664dd6"/></para>
            </example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> class.</para>
            <para>To begin a transaction use <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.BeginTransaction"/>.</para>
            <para>To use custom transactions see <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTransactionFactory"/> and example <conceptualLink target="6062ae56-2c31-4c34-87e9-9296a2664dd6"/>.</para>
            </summary>
            <param name="builder">The BcfDataSet.</param>
            <exception cref="T:System.ArgumentNullException">builder is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">builder was not initialized by a transaction factory</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Undo">
            <summary>
            Infrastructure. This method supports the infrastructure and is not intended to be used directly from your code.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCommitted"/> is <c>false</c></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Redo">
            <summary>
            Infrastructure. This method supports the infrastructure and is not intended to be used directly from your code.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCommitted"/> is <c>false</c></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Compute">
            <summary>
            Executes all necessary operations to bring the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/>s up to date. The validation tags will not be updated.
            </summary>
            <remarks>
            <para><c>Compute()</c> calls <seealso cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.EnforceRelationConstraints"/> before any function or validator will be executed.</para>
            <para>You only need to call this method if you have to get computed values within a transaction. For example this is necessary when coding a content based <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter"/>.</para>
            <para>Before every begin and end of any transaction or subtransaction the queued calculations and validations will be processed.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded"/> is <c>true</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> is <c>false</c></para>
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException">enforcing relations or calculation caused an exception</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Compute(System.Boolean)">
            <summary>
            Executes all necessary operations to bring the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/>s up to date.
            </summary>
            <param name="validate">if set to <c>true</c> rows validation tags will be updated too.</param>
            <remarks>
            <para>You only need to call this method if you have to get computed values within a transaction. For example this is necessary when coding a content based <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter"/>.</para>
            <para>Before every begin and end of any transaction or subtransaction the queued calculations and validations will be processed.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded"/> is <c>true</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> is <c>false</c></para>
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException">enforcing relations or calculation caused an exception</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.EnforceRelationConstraints">
            <summary>
            Updates the internal indexes and throws <see cref="T:System.ArgumentException"/> if any foreign or unique key constraint is violated.
            </summary>
            <remarks> If an exception ist thrown the transaction ist NOT marked as corrupt. The invalid data can be updated. </remarks>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded"/> is <c>true</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> is <c>false</c></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.BeginSubTransaction">
            <summary>
            Begins a sub transaction.
            </summary>
            <returns>BcfTransaction.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded"/> is <c>true</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> is <c>false</c></para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException">enforcing relations or calculation caused an exception</exception>
            <remarks>Before every end of any transaction or subtransaction and every begin of a subtransaction the queued calculations and validations will be processed.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.BeginSubTransaction(CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder)">
            <summary>
            Begins a sub transaction.
            </summary>
            <param name="builder">The builder.</param>
            <returns>BcfTransaction.</returns>
            <exception cref="T:System.ArgumentNullException">builder is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded"/> is <c>true</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> is <c>false</c></para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException">enforcing relations or calculation caused an exception</exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <remarks>Before every end of any transaction or subtransaction and every begin of a subtransaction the queued calculations and validations will be processed.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Commit">
            <summary>
            Commits all changes within this transaction.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded"/> is <c>true</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> is <c>false</c></para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException">enforcing relations or calculation caused an exception</exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException">Exception occurred after transaction was committed while releasing the change events.</exception>
            <remarks>Before every end of any transaction or subtransaction and every begin of a subtransaction the queued calculations and validations will be processed.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.OnCommit">
            <summary>
            Called when committing.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback">
            <summary>
            Discards the transaction and restores the data from state before the transaction started.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> and <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCommitted"/> are <c>false</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCommitted"/> is <c>true</c></para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException">Rollback failed.</exception>
            <remarks>
            The order of the contained rows in any <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection"/> (see <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Rows"/>, <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.ChildRows"/>) is not reliable and may be changed by <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>, <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.OnRollback">
            <summary>
            Called when rollback.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback(System.Exception)">
            <summary>
            Discards the transaction and restores the data from state before the transaction started.
            </summary>
            <param name="reason">When an exception occurs the <c>reason</c> will be placed as inner exception - or in case of a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException"/> as <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException.Reason"/> property. Default is <c>null</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> and <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCommitted"/> are <c>false</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCommitted"/> is true</para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException">Rollback failed.</exception>
            <remarks>Before every end of any transaction or subtransaction and every begin of a subtransaction the queued calculations and validations will be processed.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.AddItem(CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem)">
            <summary>
            Adds the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/> to the transactions compensation repository.
            </summary>
            <param name="item">The item.</param>
            <exception cref="T:System.ArgumentNullException">item is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> is <c>false</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded"/> is <c>true</c></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.AddItems(System.Collections.Generic.IEnumerable{CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem})">
            <summary>
            Adds the items to the transactions compensation repository.
            </summary>
            <param name="items">The item.</param>
            <exception cref="T:System.ArgumentNullException">item is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent"/> is <c>false</c></para>
            <para><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded"/> is <c>true</c></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.EnterDumbMode">
            <summary>
            <para>Sets all computed cells and validations to 'must recompute' and disables the internal change tracking until next call of <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Compute"/>
            (implicit by <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.BeginSubTransaction"/> or <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Commit"/>) or <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>.
            When DumbMode ends all computed cells and validations will be recomputed.</para>
            <para>Very useful when loading data into an empty <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</para>
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is not the current transaction</exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.DropCompensationRepository">
            <summary>
            Drops the compensation repository.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is not the current transaction</para>
            or
            <para>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is a subtransaction</para>
            or
            <para><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.ChangeTracking"/> is true.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <remarks>
            <para>A <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> with a dropped compensation repository cannot <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/> nor <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Undo"/>. </para>
            <para>Dropping the compensation repository will reduce memory consumption and improve performance when expecting massive changes. The effect is small and only present if called before changes are made.</para>
            </remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.AutoRollback">
            <summary>
            Gets or sets a value indicating whether the transaction will automatic <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/> when <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Commit"/> fails.
            </summary>
            <value><c>true</c> if automatic rollback; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.CompensationRepository">
            <summary>
            Gets the compensation repository.
            </summary>
            <value>The compensation repository.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the transaction belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCurrent">
            <summary>
            Gets a value indicating whether this instance is current.
            </summary>
            <value><c>true</c> if this instance is current; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsCommitted">
            <summary>
            Gets a value indicating whether this instance is committed.
            </summary>
            <value><c>true</c> if this instance is committed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsDiscarded">
            <summary>
            Gets a value indicating whether this instance is discarded.
            </summary>
            <value><c>true</c> if this instance is discarded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.IsSubTransaction">
            <summary>
            Gets a value indicating whether this instance is sub transaction.
            </summary>
            <value><c>true</c> if this instance is sub transaction; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.CompensationRepositoryDropped">
            <summary>
            Gets a value indicating whether compensation repository is dropped.
            </summary>
            <value><c>true</c> if compensation repository is dropped; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTransactionFactory">
            <summary>
            Dataset behavior item that creates the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> objects.
            </summary>
            <example><para>How to use a custom transaction factory class see: <conceptualLink target="6062ae56-2c31-4c34-87e9-9296a2664dd6"/></para></example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetTransactionFactory.CreateTransaction(CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder)">
            <summary>
            Creates the transaction.
            </summary>
            <param name="builder">The builder.</param>
            <returns>BcfTransaction.</returns>
            <exception cref="T:System.ArgumentNullException">builder is <c>null</c></exception>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell">
            <summary>
            Represents an individual cell in a table. 
            </summary>
            <example>
            <para><conceptualLink target="47a59f0c-e07e-4b62-be48-e97efd49ad82"/></para>
            </example>>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfCell.SetValue(System.Object)">
            <summary>
            Sets the value optimistic.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">row is deleted or undone added</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfCell.SetValue(System.Object,System.Boolean)">
            <summary>
            Sets the value.
            </summary>
            <param name="value">The value.</param>
            <param name="optimistic">if set to <c>true</c> operation will be executed in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> and in case of error the transaction has to be discarded (<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>). Otherwise operation will be executed in a subtransaction of <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> in case of error the subtransaction will be discarded without affecting <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. For best performance set optimistic to <c>true</c>. Default is <c>true</c>.</param>
            <exception cref="T:System.InvalidOperationException">row is deleted or undone added</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfCell.ConvertedValueEquals(System.Object)">
            <summary>
            Converts the given object, compares the converted object with the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> property and returns the result.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> equals converted other, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfCell.ValueEquals(System.Object)">
            <summary>
            Compares a given object with the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> property and returns the result.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> equals other, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfCell.IsValueNull">
            <summary>
            Gets a value that indicates whether the cell <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> property is null.
            </summary>
            <returns><c>true</c> if <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> is null; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Column">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumn"/> the cell belongs to.
            </summary>
            <value>The column.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Row">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/> the cell belongs to.
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
            <exception cref="T:System.InvalidOperationException">when setting a value and the row is deleted or undone added</exception>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.BcfCell.ValueChanged">
            <summary>
            Occurs when <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> property has been changed. This event is deferred until the last <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is committed.
            </summary>
            <remarks>
            <para>The event will be raised as often as the value property has been changed within the transaction. Undone changes via <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> rollback will not raise the event.</para>
            </remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfCellChangedEventArgs">
            <summary>
            Provides event data. 
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfCellChangedEventArgs.Cell">
            <summary>
            Gets the cell containing the changed value.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfCellChangedEventArgs.ChangeType">
            <summary>
            Gets the type of the change.
            </summary>
            <value>The change type.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumn">
            <summary>
            Represents the schema of a column in a BcfTable. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.EnsureTypeConstraints(System.Object,CalculationWorks.NonCommercial.BusinessModel.BcfCell)">
            <summary>
            Ensures the type constraints.
            </summary>
            <param name="value">The value.</param>
            <param name="cell">The cell.</param>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTypeConstraintException">type constraint failed</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.ToString">
            <summary>
            Returns <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Name"/>
            </summary>
            <returns><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Name"/> property</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Table">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/> the column belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Function">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/> used to calculate the values in this column. 
            </summary>
            <value>The function.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Index">
            <summary>
            Gets the position of the column within the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Columns">BcfTable.Columns</see> collection.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Behavior">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/>.</value>
            <example>
            <conceptualLink target="ad610eb3-a6ae-42f0-a4d3-237451982801"/>
            </example>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Name">
            <summary>
            Gets the columns name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumnCollection">
            <summary>
            Represents a collection of BcfColumn objects for a BcfTable. This class cannot be inherited.
            </summary>
            <remarks>The collection is case-sensitive when it searches for column names.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfColumnCollection.TryGetColumn(System.String,CalculationWorks.NonCommercial.BusinessModel.BcfColumn@)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <param name="columnName">The name of the column to get.</param>
            <param name="column">When this method returns, contains the column with the specified name, if the columnName is found; otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the collection contains an column with the specified name; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">columnName is <c>null</c></exception>
            <remarks>The collection is case-sensitive when it searches for column names.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfColumnCollection.Contains(System.String)">
            <summary>
            Determines whether the specified name is in the collection.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns><c>true</c> if the specified name is in the collection; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">columnName is <c>null</c></exception>
            <remarks>The collection is case-sensitive when it searches for column names.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumnCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumn"/> from the collection with the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumn"/> in the Collection with the specified <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfColumn.Name"/>.</value>
            <exception cref="T:System.ArgumentNullException">columnName is <c>null</c></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">columnName not in list</exception>
            <remarks>The collection is case-sensitive when it searches for column names.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase`1">
            <summary>
            Generic base class of all custom functions.
            </summary>
            <typeparam name="T">The return typ of the <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase`1.Compute"/> method.</typeparam>
            <example>
            <para><conceptualLink target="1dc7cfd4-7678-4891-bdee-d458d49014f6"/></para>
            <para><conceptualLink target="d2763150-69fd-4d23-a4fc-fe5a29c4e1bd"/></para>
            </example>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase">
            <summary>
            Infrastructure. The type supports the infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase.Column">
            <summary>
            Gets the column.
            </summary>
            <value>The column.</value>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase`1.Compute">
            <summary>
            Computes the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> property.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet">
            <summary>
            Represents an in-memory reactive data model.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.#ctor(CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> class.
            </summary>
            <param name="setup">The setup.</param>
            <exception cref="T:System.ArgumentNullException">setup is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EnableChangeTracking">
            <summary>
            Enables change tracking (collecting data for <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>).
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Behavior"/>.<seealso cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.UndoRepository"/> is null</exception>
            <remarks>The method call will be ignored when change tracking is already enabled.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.DisableChangeTracking">
            <summary>
            Disables change tracking (collecting data for <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>) and clears the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior.UndoRepository"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <remarks>The method call will be ignored when change tracking is already disabled.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo">
            <summary>
            Undoes the last <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/>.
            </summary>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository"/>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <exception cref="T:System.InvalidOperationException">A <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is active (<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> is not <c>null</c>).</exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException">Exception occurred after Undo() while releasing the change events.</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CanUndo">
            <summary>
            Determines whether <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> can be executed.
            </summary>
            <returns><c>true</c> if undo can be executed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo">
            <summary>
            Redoes the last undone <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/>.
            </summary>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository"/>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <exception cref="T:System.InvalidOperationException">A <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is active (<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> is not <c>null</c>).</exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoException">A compensation operation failed.</exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfExternalEventReleaseException">Exception occurred after Redo() while releasing the change events.</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CanRedo">
            <summary>
            Determines whether <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/> can be executed.
            </summary>
            <returns><c>true</c> if redo can be executed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.BeginTransaction">
            <summary>
            Creates a transaction and sets it as the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. If <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> is not <c>null</c> before calling <c>BeginTransaction</c> a subtransaction of the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> will be created.
            </summary>
            <returns>BcfTransaction.</returns>
            <exception cref="T:System.InvalidOperationException"> reentrancy call (<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.ReleasingEvents"/> is <c>true</c>) </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException"><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> is not <c>null</c> and enforcing relations or calculation caused an exception</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.BeginTransaction(System.Boolean)">
            <summary>
            Creates a transaction and sets it as the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. If <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> is not <c>null</c> before calling <c>BeginTransaction</c> a subtransaction of the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> will be created.
            </summary>
            <param name="autoRollback">if set to <c>true</c> transaction will automatic rollback when commit fails. Default is <c>true</c>.</param>
            <returns>BcfTransaction.</returns>
            <exception cref="T:System.InvalidOperationException"> reentrancy call (<see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.ReleasingEvents"/> is <c>true</c>) </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException"><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> is not <c>null</c> and enforcing relations or calculation caused an exception</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.BeginTransaction(CalculationWorks.NonCommercial.BusinessModel.BcfTransactionBuilder)">
            <summary>
            Creates a transaction and sets it as the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. If <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> is not <c>null</c> before calling <c>BeginTransaction</c> a subtransaction of the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> will be created.
            </summary>
            <param name="builder">The builder.</param>
            <returns>BcfTransaction.</returns>
            <exception cref="T:System.ArgumentNullException">builder is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfComputeException"><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> is not <c>null</c> and enforcing relations or calculation caused an exception</exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Name">
            <summary>
            Gets the name of the current dataset. 
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Tables">
            <summary>
            Gets the collection of tables contained in the dataset. 
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTableCollection"/> contained by this dataset. An empty collection is returned if no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/> objects exist. </value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Relations">
            <summary>
            Get the collection of relations that link tables and allow parameter access from parent tables to child tables and vice versa. 
            </summary>
            <value>A <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationCollection"/> that contains a collection of <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelation"/> objects. An empty collection is returned if no relation objects exist.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.ChangeTracking">
            <summary>
            Gets a value indicating whether change tracking (collecting data for <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>) is enabled.
            </summary>
            <value><c>true</c> if change tracking (collecting data for <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>) is enabled; otherwise, <c>false</c>.</value>
            <remarks>
            <para>To enable see <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EnableChangeTracking"/> and to disable see <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.DisableChangeTracking"/>.</para>
            </remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.ReleasingEvents">
            <summary>
            Gets a value indicating whether release of deferred events is currently in process.
            </summary>
            <value><c>true</c> if release in process; otherwise, <c>false</c>.</value>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfCell.ValueChanged"/>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.RelatedRowChanged"/>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfRow.CellChanged"/>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection.RowCollectionChanged"/>
            <remarks>While <c>ReleasingEvents</c> is <c>true</c> <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.BeginTransaction"/> will fail.</remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseStart">
            <summary>
            Occurs when the release of deferred change events is about to begin.
            </summary>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfCell.ValueChanged"/>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfRow.CellChanged"/>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection.RowCollectionChanged"/>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.EventsReleaseEnd">
            <summary>
            Occurs when the release of deferred change events is completed.
            </summary>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfCell.ValueChanged"/>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfRow.CellChanged"/>
            <see cref="E:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection.RowCollectionChanged"/>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.InDumbMode">
            <summary>
            Gets a value indicating whether the instance is in dumb mode.
            <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.EnterDumbMode"/> for details.
            </summary>
            <value><c>true</c> if is in dumb mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.ValidationResults">
            <summary>
            Gets the collection of <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResult"/> objects.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResultCollection"/> contained by this DataSet. An empty collection is returned if no <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorResult"/> objects exist. </value>
            <seealso cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Validators"/>
            <seealso cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Behavior">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehavior"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction">
            <summary>
            Gets the current <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/>.
            </summary>
            <value>The current transaction or <c>null</c> when no transaction is active</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Calculating">
            <summary>
            Gets a value indicating whether this <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is currently calculating.
            </summary>
            <value><c>true</c> if currently calculating; otherwise, <c>false</c>.</value>
            <remarks>when calculating all write attempts on cells will fail</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Locked">
            <summary>
            Gets a value indicating whether this <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is locked.
            </summary>
            <value><c>true</c> if locked; otherwise, <c>false</c>.</value>
            <remarks>
            <para><c>true</c> when the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> property is changing.</para>
            <para>When <c>true</c> all data changes will fail.</para>
            </remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfPropertyAttribute">
            <summary>
            Properties decorated with this attribute will appear in the editor. This class cannot be inherited.
            </summary>
            <remarks>
            <para>Properties decorated with this attribute will appear in the editor.</para>
            <para>In order to make property assignment mandatory in the editor, use <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfMandatoryAttribute"/> instead</para>
            </remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell">
            <summary>
            Represents an individual child-to-parent row relation. 
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.SetRelatedRow(CalculationWorks.NonCommercial.BusinessModel.BcfRow)">
            <summary>
            Sets the related (parent) row optimistic.
            </summary>
            <param name="value">The value.</param>
            <exception cref="T:System.InvalidOperationException">
            <para>current row has invalid state</para>
            <para>given row has invalid state</para>
            <para>given row is not in associated parent table</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <remarks>The related row must be a valid row in the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.Relation"/>s parent table.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.SetRelatedRow(CalculationWorks.NonCommercial.BusinessModel.BcfRow,System.Boolean)">
            <summary>
            Sets the related (parent) row.
            </summary>
            <param name="value">The value.</param>
            <param name="optimistic">if set to <c>true</c> operation will be executed in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> and in case of error the transaction has to be discarded (<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>). Otherwise operation will be executed in a subtransaction of <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> in case of error the subtransaction will be discarded without affecting <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. For best performance set optimistic to <c>true</c>. Default is <c>true</c>.</param>
            <exception cref="T:System.InvalidOperationException">
            <para>current row has invalid state</para>
            <para>given row has invalid state</para>
            <para>given row is not in associated parent table</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <remarks>The related row must be a valid row in the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.Relation"/>s parent table.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.Relation">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelation"/> the cell belongs to.
            </summary>
            <value>The relation.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.Row">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/> the cell belongs to.
            </summary>
            <value>The row.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.ParentRow">
            <summary>
            Gets or sets the related <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/>.
            </summary>
            <value>The related row.</value>
            <exception cref="T:System.InvalidOperationException">
            <para>current row has invalid state</para>
            <para>given row has invalid state</para>
            <para>given row is not in associated parent table</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <remarks><para>The setter works optimistic</para>
            <para>The related row must be a valid row in the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.Relation"/>s parent table.</para></remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.RelatedRowChanged">
            <summary>
            Occurs when <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell.ParentRow"/> property changed. This event is deferred until the last <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is committed.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell">
            <summary>
            Represents an individual parent-to-child rows relation. 
            </summary>
            <remarks>
            The order of the contained rows is not reliable and may be changed by <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>, <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.AddChildRow(CalculationWorks.NonCommercial.BusinessModel.BcfRow)">
            <summary>
            Adds the specified row (as child row) optimistic.
            </summary>
            <param name="childRow">The new related row.</param>
            <exception cref="T:System.ArgumentNullException">relatedRow is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para>current row has invalid state</para>
            <para>specified row has invalid state</para>
            <para>specified row is not in associated child table</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.AddChildRow(CalculationWorks.NonCommercial.BusinessModel.BcfRow,System.Boolean)">
            <summary>
            Adds the specified row (as child row).
            </summary>
            <param name="childRow">The new related row.</param>
            <param name="optimistic">if set to <c>true</c> operation will be executed in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> and in case of error the transaction has to be discarded (<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>). Otherwise operation will be executed in a subtransaction of <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> in case of error the subtransaction will be discarded without affecting <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. For best performance set optimistic to <c>true</c>. Default is <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">relatedRow is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para>current row has invalid state</para>
            <para>specified row has invalid state</para>
            <para>specified row is not in associated child table</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.RemoveChildRow(CalculationWorks.NonCommercial.BusinessModel.BcfRow)">
            <summary>
            Removes the specified child row optimistic.
            </summary>
            <param name="relatedRow">The related row to remove.</param>
            <exception cref="T:System.ArgumentNullException">relatedRow is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRowState"/>is invalid</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.ChildRows"/>does not contain relatedRow</exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.RemoveChildRow(CalculationWorks.NonCommercial.BusinessModel.BcfRow,System.Boolean)">
            <summary>
            Removes the specified child row.
            </summary>
            <param name="relatedRow">The related row to remove.</param>
            <param name="optimistic">if set to <c>true</c> operation will be executed in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> and in case of error the transaction has to be discarded (<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>). Otherwise operation will be executed in a subtransaction of <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> in case of error the subtransaction will be discarded without affecting <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. For best performance set optimistic to <c>true</c>. Default is <c>true</c>.</param>
            <exception cref="T:System.ArgumentNullException">relatedRow is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRowState"/>is invalid</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.ChildRows"/>does not contain relatedRow</exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.Relation">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelation"/> the cell belongs to.
            </summary>
            <value>The relation.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.ChildRows">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection"/> containing the related rows.
            </summary>
            <value>The related rows collection.</value>
            <remarks>The order of the contained rows is not reliable and may be changed by <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>, <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell.Row">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/> the cell belongs to.
            </summary>
            <value>The row.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelation">
            <summary>
            Represents a parent-child relationship between two BcfTable objects. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the relation belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.ParentTable">
            <summary>
            Gets the parent <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/>.
            </summary>
            <value>The parent <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.ChildTable">
            <summary>
            Gets the child <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/>.
            </summary>
            <value>The child <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.ParentKeyColumns">
            <summary>
            Gets the parent key columns.
            </summary>
            <value>The parent key columns.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.ChildKeyColumns">
            <summary>
            Gets the child key columns.
            </summary>
            <value>The child key columns.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.DeleteRule">
            <summary>
            Gets the delete action.
            </summary>
            <value>The delete action.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.UpdateRule">
            <summary>
            Gets the update action.
            </summary>
            <value>The update action.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.Behavior">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfRelationBehavior"/>.
            </summary>
            <value>The relation behavior.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelation.Name">
            <summary>
            Gets the relations name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationCollection">
            <summary>
            Represents the collection of BcfRelation objects for this BcfDataSet. This class cannot be inherited.
            </summary>
            <remarks>The collection is case-sensitive when it searches for relation names.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelationCollection.TryGetRelation(System.String,CalculationWorks.NonCommercial.BusinessModel.BcfRelation@)">
            <summary>
            Gets the relation with the specified name.
            </summary>
            <param name="relationName">The name of the relation to get.</param>
            <param name="relation">When this method returns, contains the relation with the specified name, if the relationName is found; otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the collection contains a relation with the specified name; otherwise <c>false</c>.</returns>
            <remarks>The collection is case-sensitive when it searches for relation names.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRelationCollection.Contains(System.String)">
            <summary>
            Determines whether the specified relation name is contained.
            </summary>
            <param name="relationName">Name of the relation.</param>
            <returns><c>true</c> if the specified relation name is contained; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">relationName is <c>null</c></exception>
            <remarks>The collection is case-sensitive when it searches for relation names.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRelationCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelation"/> with the specified relation name.
            </summary>
            <param name="relationName">Name of the relation.</param>
            <returns>BcfRelation.</returns>
            <exception cref="T:System.ArgumentNullException">relationName is <c>null</c></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">relationName not in list</exception>
            <remarks>The collection is case-sensitive when it searches for relation names.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException">
            <summary>
            This exception is thrown when a transaction rollback failed.
            </summary>
            <remarks>
            When this exception is thrown the model is invalid an can not be restored.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException.#ctor(System.String,System.Exception,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified. </param>
            <param name="reason">The reason.</param>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRollbackException.Reason">
            <summary>
            Gets the specified reason when calling <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback(System.Exception)"/> or <c>null</c> if no reason was specified.
            </summary>
            <value>The reason.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow">
            <summary>
            Represents a row of data in a BcfTable. 
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfRowBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/> class.
            </summary>
            <param name="builder">The builder.</param>
            <exception cref="T:System.ArgumentNullException">builder is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetTable">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/> the row belongs to.
            </summary>
            <returns>The table the row belongs to.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetValidationTags(System.String)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent"/> objects a columns cell is tagged with.
            </summary>
            <param name="columnName">columns name</param>
            <exception cref="T:System.ArgumentNullException">columnName is <c>null</c></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">A column with columnName is not in table</exception>
            <remarks>The collection is case-sensitive when it searches for column names.</remarks>
            <example><conceptualLink target="47a59f0c-e07e-4b62-be48-e97efd49ad82"/></example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetValidationTags(System.Int32)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent"/> objects a columns cell is tagged with.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <returns>IEnumerable&lt;BcfValidatorCellContent&gt;.</returns>
            <exception cref="T:System.IndexOutOfRangeException">columnIndex out of bounds.</exception>
            <example><conceptualLink target="47a59f0c-e07e-4b62-be48-e97efd49ad82"/></example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetValidationTags(CalculationWorks.NonCommercial.BusinessModel.BcfCell)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent"/> objects a columns cell is tagged with.
            </summary>
            <param name="cell">The cell.</param>
            <returns>IEnumerable&lt;BcfValidatorCellContent&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">cell</exception>
            <example><conceptualLink target="47a59f0c-e07e-4b62-be48-e97efd49ad82"/></example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetValidationTags">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCellContent"/> objects of all tagged cells in this row.
            </summary>
            <returns>IEnumerable&lt;BcfValidatorCellContent&gt;.</returns>
            <example><conceptualLink target="47a59f0c-e07e-4b62-be48-e97efd49ad82"/></example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRowState">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowState"/>.
            </summary>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowState"/>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRelatedRowsCell(System.Int32)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell"/> at the specified parent relation index.
            </summary>
            <param name="parentRelationIndex">Index of the parent relation.</param>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell"/>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRelatedRowsCell(CalculationWorks.NonCommercial.BusinessModel.BcfRelation)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell"/> of the specified relation.
            </summary>
            <param name="parentRelation">The parent relation.</param>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell"/>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRelatedRowsCell(System.String)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell"/> at the specified position.
            </summary>
            <param name="parentRelationName">Name of the parent relation.</param>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowsCell"/>.</returns>
            <exception cref="T:System.ArgumentNullException">parentRelationName</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">parentRelationName</exception>
            <remarks>The collection is case-sensitive when it searches for relation names.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRelatedRowCell(System.Int32)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell"/> at the specified child relation index.
            </summary>
            <param name="childRelationIndex">Index of the child relation.</param>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell"/>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRelatedRowCell(CalculationWorks.NonCommercial.BusinessModel.BcfRelation)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell"/> of the specified child relation.
            </summary>
            <param name="childRelation">The child relation.</param>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell"/>.</returns>
            <exception cref="T:System.ArgumentNullException">childRelation</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">childRelation</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRelatedRowCell(System.String)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell"/> of the specified child relation.
            </summary>
            <param name="childRelationName">Name of the child relation.</param>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelatedRowCell"/>.</returns>
            <exception cref="T:System.ArgumentNullException">childRelationName</exception>
            <remarks>The collection is case-sensitive when it searches for relation names.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.AddRowToTable">
            <summary>
            Adds a new row to table optimistic.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRowState"/> is not <see cref="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.Created"/></exception>
            <exception cref="T:System.ArgumentException">At lease one <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/> in this row has an invalid value</exception>
            <exception cref="T:System.InvalidOperationException"><para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.AddRowToTable(System.Boolean)">
            <summary>
            Adds a new row to table.
            </summary>
            <param name="optimistic">if set to <c>true</c> operation will be executed in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> and in case of error the transaction has to be discarded (<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>). Otherwise operation will be executed in a subtransaction of <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> in case of error the subtransaction will be discarded without affecting <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. For best performance set optimistic to <c>true</c>. Default is <c>true</c>.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRowState"/> is not <see cref="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.Created"/></exception>
            <exception cref="T:System.ArgumentException">At lease one <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/> in this row has an invalid value</exception>
            <exception cref="T:System.InvalidOperationException"><para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.Delete">
            <summary>
            Deletes this row optimistic.
            </summary>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException">cannot delete row.  + ex.Message</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRowState"/> is <see cref="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.Created"/> or <see cref="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.UndoneAdded"/></exception>
            <exception cref="T:System.InvalidOperationException"><para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException">operation failed due to a relation conflict. see inner exception <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException"/> or <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException"/></exception></exception>
            <remarks>Using optimistic delete with non automatic transaction rollback may cause unexpected results when operation fails.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.Delete(System.Boolean)">
            <summary>
            Deletes this row.
            </summary>
            <param name="optimistic">if set to <c>true</c> operation will be executed in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> and in case of error the transaction has to be discarded (<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>). Otherwise operation will be executed in a subtransaction of <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> in case of error the subtransaction will be discarded without affecting <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. For best performance set optimistic to <c>true</c>. Default is <c>true</c>.</param>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException">cannot delete row.  + ex.Message</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetRowState"/> is <see cref="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.Created"/> or <see cref="F:CalculationWorks.NonCommercial.BusinessModel.BcfRowState.UndoneAdded"/></exception>
            <exception cref="T:System.InvalidOperationException"><para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            <exception cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowDeleteException">operation failed due to a relation conflict. see inner exception <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationConstraintException"/> or <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfKeyCellUpdateException"/></exception></exception>
            <remarks>Using optimistic delete with non automatic transaction rollback may cause unexpected results when operation fails.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.op_Equality(CalculationWorks.NonCommercial.BusinessModel.BcfRow,System.Object)">
            <summary>
            Overloads the == operator.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>The result of the operator (same as <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>).</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.op_Inequality(CalculationWorks.NonCommercial.BusinessModel.BcfRow,System.Object)">
            <summary>
            Overloads the != operator.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>The result of the operator (same as !<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>).</returns>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.BcfRow.CellChanged">
            <summary>
            Occurs when a <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfCell.Value"/> of any <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/> in the row changed. This event is deferred until the last <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is committed.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRow.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>BcfCell.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Index out of bounds.</exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRow.Item(CalculationWorks.NonCommercial.BusinessModel.BcfColumn)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/> with the specified column.
            </summary>
            <param name="column">The column.</param>
            <returns>BcfCell.</returns>
            <exception cref="T:System.ArgumentNullException">column is <c>null</c></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Column is not in table</exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRow.Item(System.String)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfCell"/> with the specified column name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>BcfCell.</returns>
            <exception cref="T:System.ArgumentNullException">columnName is <c>null</c></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">A column with columnName is not in table</exception>
            <remarks>The collection is case-sensitive when it searches for column names.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection">
            <summary>
            Represents a collection of rows for a BcfTable. This class cannot be inherited.
            </summary>
            <remarks>
            The order of the contained rows is not reliable and may be changed by <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>, <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>.
            </remarks>
        </member>
        <member name="E:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection.RowCollectionChanged">
            <summary>
            Occurs when the collection changed. This event is deferred until the last <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/> is committed.
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollectionChangedEventArgs">
            <summary>
            Provides event data. 
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollectionChangedEventArgs.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollectionChangedEventArgs.Row">
            <summary>
            Gets the row.
            </summary>
            <value>The row.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable">
            <summary>
            Represents a table of in-memory data. 
            </summary>
            <remarks>
            The order of the contained rows is not reliable and may be changed by <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>, <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfTableBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/> class.
            </summary>
            <param name="builder">The builder.</param>
            <exception cref="T:System.ArgumentNullException">builder is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.CreateNewRow">
            <summary>
            Returns a new row for the table. The row will not be added to the 
            <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Rows"/> collection before calling
            <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfRow.AddRowToTable(System.Boolean)"/>.
            Until then the row is not part of the data. Calling 
            <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.CreateNewRow"/> will not cause a data change nor create an undo item.
            </summary>
            <returns>A new row for the table.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.AddNewRow">
            <summary>
            Creates a new <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/> and adds it to the tables <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection"/> optimistic.
            </summary>
            <returns><see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.AddNewRow(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a new <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/> and adds it to the tables <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection"/> optimistic.
            </summary>
            <param name="defaultValues">The default values.</param>
            <returns>BcfRow.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.AddNewRow(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            Creates a new <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/> and adds it to the tables <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection"/>.
            </summary>
            <param name="defaultValues">The default values.</param>
            <param name="optimistic">if set to <c>true</c> operation will be executed in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> and in case of error the transaction has to be discarded (<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>). Otherwise operation will be executed in a subtransaction of <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> in case of error the subtransaction will be discarded without affecting <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. For best performance set optimistic to <c>true</c>. Default is <c>true</c>.</param>
            <returns>BcfRow.</returns>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Load(System.Object[])">
            <summary>
            Loads the specified values into one new row and adds it to table optimistic.
            </summary>
            <param name="values">The values.</param>
            <returns>BcfRow.</returns>
            <exception cref="T:System.ArgumentNullException">values is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Load(System.Object[],System.Boolean)">
            <summary>
            Loads the specified values into one new row and adds it to table.
            </summary>
            <param name="values">The values.</param>
            <param name="optimistic">if set to <c>true</c> operation will be executed in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> and in case of error the transaction has to be discarded (<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>). Otherwise operation will be executed in a subtransaction of <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/> in case of error the subtransaction will be discarded without affecting <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.CurrentTransaction"/>. For best performance set optimistic to <c>true</c>. Default is <c>true</c>.</param>
            <returns>BcfRow.</returns>
            <exception cref="T:System.ArgumentNullException">values is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.ToString">
            <summary>
            Returns the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Name"/>.
            </summary>
            <returns>The tables <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Name"/> property.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.GetRowType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the rows.
            </summary>
            <returns>Type.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.op_Equality(CalculationWorks.NonCommercial.BusinessModel.BcfTable,System.Object)">
            <summary>
            Overloads the == operator.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>The result of the operator (same as <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>).</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable.op_Inequality(CalculationWorks.NonCommercial.BusinessModel.BcfTable,System.Object)">
            <summary>
            Overloads the != operator.
            </summary>
            <param name="objA">The object a.</param>
            <param name="objB">The object b.</param>
            <returns>The result of the operator (same as !<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>).</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the table belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Name">
            <summary>
            Gets the tables name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Columns">
            <summary>
            Gets the collection of columns belonging to this table.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfColumnCollection"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Rows">
            <summary>
            Gets the collection of rows belonging to this table.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRowCollection"/>.</value>
            <remarks>
            The order of the contained rows is not reliable and may be changed by <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Rollback"/>, <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Undo"/> and <see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Redo"/>.
            </remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.ParentRelations">
            <summary>
            Gets the collection of parent relations for this table.
            </summary>
            <value>The parent <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationCollection"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.ChildRelations">
            <summary>
            Gets the collection of child relations for this table.
            </summary>
            <value>The child <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationCollection"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Index">
            <summary>
            Gets the position of the table in <see cref="P:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet.Tables">BcfDataSet.Tables</see> collection.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Behavior">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfTableBehavior"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable.Validators">
            <summary>
            Gets the collection of validators belonging to this table.
            </summary>
            <value>The validators.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable`1">
            <summary>
            Class BcfTable. The abstract base class for typed table classes.
            </summary>
            <typeparam name="TRow">The type of the rows.</typeparam>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable`1.#ctor(CalculationWorks.NonCommercial.BusinessModel.BcfTableBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable`1"/> class.
            </summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable`1.CreateRow(CalculationWorks.NonCommercial.BusinessModel.BcfRowBuilder)">
            <summary>
            Creates the row.
            </summary>
            <param name="builder">The builder.</param>
            <returns>TRow.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTable`1.GetRowType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the rows.
            </summary>
            <returns>Type.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTable`1.Item(System.Int32)">
            <summary>
            Gets the row at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>TRow.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Index out of bounds.</exception>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfTableCollection">
            <summary>
            Represents the collection of tables for the BcfDataSet. This class cannot be inherited.
            </summary>
            <remarks>The collection is case-sensitive when it searches for table names.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTableCollection.TryGetTable(System.String,CalculationWorks.NonCommercial.BusinessModel.BcfTable@)">
            <summary>
            Gets the table with the specified name.
            </summary>
            <param name="tableName">The name of the table to get.</param>
            <param name="table">When this method returns, contains the table with the specified name, if the tableName is found; otherwise, <c>null</c>. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the collection contains an table with the specified name; otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">tableName is <c>null</c></exception>
            <remarks>The collection is case-sensitive when it searches for table names.</remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfTableCollection.Contains(System.String)">
            <summary>
            Determines whether the specified table name is contained.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns><c>true</c> if the specified table name is contained; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">tableName is <c>null</c></exception>
            <remarks>The collection is case-sensitive when it searches for table names.</remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfTableCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTable"/> with the specified table name.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>BcfTable.</returns>
            <exception cref="T:System.ArgumentNullException">tableName is <c>null</c></exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">tableName not in list</exception>
            <remarks>The collection is case-sensitive when it searches for table names.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository">
            <summary>
            Dataset behavior item that stores undo and redo information. This class cannot be inherited.
            </summary>
            <example>
            <para><conceptualLink target="4a162a6d-639f-4b93-8496-9cd01ecd318e"/></para>
            </example>
            <remarks>
            <para>Inherit from <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetBehaviorItemBase"/> and implement <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository"/> to create a custom repository.</para>
            </remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository">
            <summary>
            Interface for dataset behavior items that acts as undo/redo repository.
            </summary>
            <example>
            <para><conceptualLink target="4a162a6d-639f-4b93-8496-9cd01ecd318e"/></para>
            </example>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.PushUndo(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction)">
            <summary>
            Pushes a transaction to the undo repository.
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.PushRedo(CalculationWorks.NonCommercial.BusinessModel.BcfTransaction)">
            <summary>
            Pushes a transaction to the redo repository
            </summary>
            <param name="transaction">The transaction.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.PopUndo">
            <summary>
            Removes the last added transaction from undo repository and returns it.
            </summary>
            <returns>BcfTransaction.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.PopRedo">
            <summary>
            Removes the last added transaction from redo repository and returns it.
            </summary>
            <returns>BcfTransaction.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.ClearUndo">
            <summary>
            Clears the undo repository.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.ClearRedo">
            <summary>
            Clears the redo repository.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.CanUndo">
            <summary>
            Determines whether undo repository is not empty.
            </summary>
            <returns><c>true</c> if undo repository is not empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.CanRedo">
            <summary>
            Determines whether redo repository is not empty.
            </summary>
            <returns><c>true</c> if redo repository is not empty; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.IBcfDataSetUndoRepository.DataSet">
            <summary>
            Gets the BcfDataSet.
            </summary>
            <value>The BcfDataSet.</value>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.ClearUndo">
            <summary>
            Clears the undo.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.ClearRedo">
            <summary>
            Clears the redo.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.CanUndo">
            <summary>
            Determines whether this instance can undo.
            </summary>
            <returns><c>true</c> if this instance can undo; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.CanRedo">
            <summary>
            Determines whether this instance can redo.
            </summary>
            <returns><c>true</c> if this instance can redo; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.UndoStack">
            <summary>
            Gets the undo stack.
            </summary>
            <value>The undo stack.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.RedoStack">
            <summary>
            Gets the redo stack.
            </summary>
            <value>The redo stack.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.UndoItemCount">
            <summary>
            Gets the undo item count.
            </summary>
            <value>The undo item count.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfDataSetUndoRepository.RedoItemCount">
            <summary>
            Gets the redo item count.
            </summary>
            <value>The redo item count.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter">
            <summary>
            Column behavior item that processes the cell value set.
            </summary>
            <example>
            <para><conceptualLink target="d2763150-69fd-4d23-a4fc-fe5a29c4e1bd"/></para>
            </example>
            <remarks>
            <para>To apply a BcfColumnValueSetter instance to a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> add it to the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/>.<see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.BehaviorItems"/>.</para>
            <para>Only one BcfColumnValueSetter instance per <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnBehavior"/> allowed.</para>
            <para>BcfColumnValueSetter can work like database triggers.</para>
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter"/> class.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter.SetValue(CalculationWorks.NonCommercial.BusinessModel.BcfCell,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="cell">The cell.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">cell is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">
            <para>dataset is locked; e.g. <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> is just switching the current transaction or is undoing/redoing.</para>
            <para>do not call this method e.g. from inside <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/>, <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/> nor <see cref="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.IBcfUndoRedoItem"/></para>
            </exception>
            <remarks>
            <para>Computed and default values do not pass this method.</para>
            <para>When overriding base method invocation can be omitted. You can redirect the write attempts to other columns. This the only chance to make computed columns editable.</para>
            <para>Try to avoid reading computed values from the dataset. If you have to and a transaction is running the values you get may be outdated until <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction"/>.<see cref="M:CalculationWorks.NonCommercial.BusinessModel.BcfTransaction.Compute(System.Boolean)"/> was called since the last SetValue().</para>
            </remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Behaviors.BcfColumnValueSetter.CanSet">
            <summary>
            Gets or sets a value indicating whether this instance can set.
            </summary>
            <value><c>true</c> if this instance can set; otherwise, <c>false</c>.</value>
            <remarks>The default value is <c>true</c>.</remarks>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup">
            <summary>
            Represents the setup for an individual BcfColumn. See also <conceptualLink target="6aa11df5-af86-4882-a41a-ccc104917882#ColumnProperties" />
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.#ctor(CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/> class.
            </summary>
            <param name="tableSetup">The table setup.</param>
            <exception cref="T:System.ArgumentNullException">tableSetup is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.SetFunction``1">
            <summary>
            Sets the function and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup"/>
            </summary>
            <typeparam name="TFunction">The type of the t function.</typeparam>
            <returns>BcfFunctionSetup.</returns>
            <exception cref="T:System.InvalidOperationException">a function is already assigned</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.SetFunction(System.Type)">
            <summary>
            Sets the function and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup"/>
            </summary>
            <param name="functionType">Type of the function.</param>
            <returns>BcfFunctionSetup.</returns>
            /// <exception cref="T:System.InvalidOperationException">a function is already assigned</exception>
            <exception cref="T:System.ArgumentNullException">functionType is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><c>functionType</c> default constructor not found</exception>
            <exception cref="T:System.ArgumentException"><c>functionType</c> is not a subclass of <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfFunctionBase"/></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.Function">
            <summary>
            Gets the function. See also: <conceptualLink target="6aa11df5-af86-4882-a41a-ccc104917882#ColumnProperties" />
            </summary>
            <value>The function.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.BehaviorItems">
            <summary>
            Gets the behavior items.
            </summary>
            <value>The behavior items.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.TableSetup">
            <summary>
            Gets the table setup.
            </summary>
            <value>The table setup.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup">
            <summary>
            Represents the function setup for an individual column.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup.#ctor(CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup"/> class.
            </summary>
            <param name="columnSetup">The column setup.</param>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup.AddParameter(System.String)">
            <summary>
            Adds a new parameter to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup.Parameters"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup"/>
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>A new BcfParameterSetup instance.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup.AddParameter(System.String,System.String)">
            <summary>
            Adds a new parameter to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup.Parameters"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup"/>
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="accessPath">The access path.</param>
            <returns>A new BcfParameterSetup instance.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup.FunctionType">
            <summary>
            Gets the type of the function.
            </summary>
            <value>The function type.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup.Parameters">
            <summary>
            Gets the parameters. See also <conceptualLink target="6aa11df5-af86-4882-a41a-ccc104917882#ParametersTable" />
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup.AllowExecuteParallel">
            <summary>
            Gets or sets a value indicating whether parallel execute is allowed.
            </summary>
            <value><c>true</c> if parallel execute is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup">
            <summary>
            Represents the setup for an BcfDataSet. See also <conceptualLink target="2a970994-9975-4f4e-a799-53fb364580c9" />
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup"/> class.
            </summary>
            <param name="dataSetName">Name of the BcfDataSet.</param>
            <exception cref="T:System.ArgumentNullException">dataSetName is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.AddTable(System.String)">
            <summary>
            Adds a new table to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.Tables"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup"/>
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>BcfTableSetup.</returns>
            <exception cref="T:System.ArgumentNullException">tableName is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.CreateTableSetup">
            <summary>
            Creates the table setup.
            </summary>
            <returns>BcfTableSetup.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.AddRelation(System.String,CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup,CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup)">
            <summary>
            Adds a new relation to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.Relations"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup"/>
            </summary>
            <param name="relationName">Name of the relation.</param>
            <param name="parentTable">The parent table.</param>
            <param name="childTable">The child table.</param>
            <returns>BcfRelationSetup.</returns>
            <exception cref="T:System.ArgumentNullException">
            relationName or parentTable or childTable is <c>null</c>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.AddRelation(System.String,CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup,CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup,CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule,CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule)">
            <summary>
            Adds a new relation to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.Relations"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup"/>
            </summary>
            <param name="relationName">Name of the relation.</param>
            <param name="parentTable">The parent table.</param>
            <param name="childTable">The child table.</param>
            <param name="updateRule">The update action.</param>
            <param name="deleteRule">The delete action.</param>
            <returns>BcfRelationSetup.</returns>
            <exception cref="T:System.ArgumentNullException">
            relationName or parentTable or childTable is <c>null</c>
            </exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.AddRelation(System.String,CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup,CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup)">
            <summary>
            Adds a new relation to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.Relations"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup"/>
            </summary>
            <param name="relationName">Name of the relation.</param>
            <param name="parentColumn">The parent column.</param>
            <param name="childColumn">The child column.</param>
            <returns>BcfRelationSetup.</returns>
            <exception cref="T:System.ArgumentNullException">
            relationName or parentColumn or childColumn is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">parentColumn or childColumn belongs to another DataSetSetup</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.AddRelation(System.String,CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup[],CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup[],CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule,CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule)">
            <summary>
            Adds a new relation to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.Relations"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup"/>
            </summary>
            <param name="relationName">Name of the relation.</param>
            <param name="parentColumns">The parent columns.</param>
            <param name="childColumns">The child columns.</param>
            <param name="updateRule">The update action.</param>
            <param name="deleteRule">The delete action.</param>
            <returns>BcfRelationSetup.</returns>
            <exception cref="T:System.ArgumentNullException">parentColumns or childColumns or relationName is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">parentColumns or childColumns is empty or any ColumnSetup in parent column and child columns belongs to another BcfDatasetSetup</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.CreateRelationSetup">
            <summary>
            Creates the relation setup.
            </summary>
            <returns>BcfRelationSetup.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.CreateColumnSetup(CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup)">
            <summary>
            Creates the column setup.
            </summary>
            <param name="tableSetup">The table setup.</param>
            <returns>BcfColumnSetup.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.CreateParameterSetup(CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup)">
            <summary>
            Creates the parameter setup.
            </summary>
            <param name="functionSetup">The function setup.</param>
            <returns>BcfParameterSetup.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.CreateParameterSetup(CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup)">
            <summary>
            Creates the parameter setup.
            </summary>
            <param name="validatorSetup">The validator setup.</param>
            <returns>BcfParameterSetup.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.CreateFunctionSetup(CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup)">
            <summary>
            Creates the function setup.
            </summary>
            <param name="columnSetup">The column setup.</param>
            <returns>BcfFunctionSetup.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.CreateValidatorSetup(CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup)">
            <summary>
            Creates the validator setup.
            </summary>
            <param name="tableSetup">The table setup.</param>
            <returns>BcfValidatorSetup.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.Tables">
            <summary>
            Gets the table collection. See also <conceptualLink target="6aa11df5-af86-4882-a41a-ccc104917882#TablesTable" />
            </summary>
            <value>The tables.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.Relations">
            <summary>
            Gets the relation collection. See also <conceptualLink target="6aa11df5-af86-4882-a41a-ccc104917882#RelationsTable" />
            </summary>
            <value>The relations.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup.BehaviorItems">
            <summary>
            Gets the behavior items.
            </summary>
            <value>The behavior items.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup">
            <summary>
            Represents the setup for an individual BcfParameter.
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.#ctor(CalculationWorks.NonCommercial.BusinessModel.Design.BcfFunctionSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup"/> class.
            </summary>
            <param name="functionSetup">The function setup.</param>
            <exception cref="T:System.ArgumentNullException">functionSetup is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.#ctor(CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup"/> class.
            </summary>
            <param name="validatorSetup">The validator setup.</param>
            <exception cref="T:System.ArgumentNullException">validatorSetup is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.AddColumnStep(CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup)">
            <summary>
            Adds the column step to <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.AccessPath"/>
            </summary>
            <param name="column">The column.</param>
            <exception cref="T:System.ArgumentNullException">column is <c>null</c></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.TagCells">
            <summary>
            Gets or sets a value indicating whether parameter cells should be tagged with the validators message.
            </summary>
            <value><c>true</c> if cells will be tagged; otherwise, <c>false</c>.</value>
            <remarks>The settings will be ignored if the parameter doesn't belongs to a <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase">validator</see></remarks>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.AccessPath">
            <summary>
            Gets or sets the access path. See also: <conceptualLink target="72630f23-6c6d-435c-bc83-53da0406488e" /> and <conceptualLink target="0ee550b3-d3f1-4558-8d09-5a88bfa8d449" />
            </summary>
            <value>The access path.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.BehaviorItems">
            <summary>
            Gets the behavior items.
            </summary>
            <value>The behavior items.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.Function">
            <summary>
            Gets the function.
            </summary>
            <value>The function.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.Validator">
            <summary>
            Gets the validator.
            </summary>
            <value>The validator.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfParameterSetup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup">
            <summary>
            Represents the setup for an individual BcfRelation. See also <conceptualLink target="7095175b-1fce-4c60-a176-270bb6b01173#RelationProperties" />
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.#ctor(CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup"/> class. See also <conceptualLink target="6aa11df5-af86-4882-a41a-ccc104917882#RelationsTable"/>
            </summary>
            <param name="dataSetSetup">The BcfDataSet setup.</param>
            <exception cref="T:System.ArgumentNullException">dataSetSetup is <c>null</c></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.ParentTable">
            <summary>
            Gets the parent table.
            </summary>
            <value>The parent table.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.ChildTable">
            <summary>
            Gets the child table.
            </summary>
            <value>The child table.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.ParentKeyColumns">
            <summary>
            Gets the parent key columns.
            </summary>
            <value>The parent key columns.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.ChildKeyColumns">
            <summary>
            Gets the child key columns.
            </summary>
            <value>The child key columns.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.UpdateRule">
            <summary>
            Gets the update action.
            </summary>
            <value>The update action.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.DeleteRule">
            <summary>
            Gets the delete action.
            </summary>
            <value>The delete action.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.BehaviorItems">
            <summary>
            Gets the behavior items.
            </summary>
            <value>The behavior items.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.DataSetSetup">
            <summary>
            Gets the BcfDataSet setup.
            </summary>
            <value>The BcfDataSet setup.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfRelationSetup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule">
            <summary>
            Enum BcfRelationRule
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule.NoAction">
            <summary>
            no action
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule.Cascade">
            <summary>
            cascade
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule.SetNull">
            <summary>
            set null
            </summary>
        </member>
        <member name="F:CalculationWorks.NonCommercial.BusinessModel.BcfRelationRule.SetDefault">
            <summary>
            set default
            </summary>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup">
            <summary>
            Represents the setup for an individual BcfTable. See also <conceptualLink target="6aa11df5-af86-4882-a41a-ccc104917882#TableProperties" />
            </summary>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.#ctor(CalculationWorks.NonCommercial.BusinessModel.Design.BcfDataSetSetup)">
            <summary>
            Initializes a new instance of the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup"/> class.
            </summary>
            <param name="dataSetSetup">The BcfDataSet setup.</param>
            <exception cref="T:System.ArgumentNullException">dataSetSetup is <c>null</c></exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.AddColumn(System.String)">
            <summary>
            Adds a new column to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.Columns"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfColumnSetup"/>
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>BcfColumnSetup.</returns>
            <exception cref="T:System.ArgumentNullException">columnName is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">columnName is an empty string</exception>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.AddValidator``1">
            <summary>
            Adds a new validator to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.Validators"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup"/>
            </summary>
            <typeparam name="TValidator">The type of the t validator.</typeparam>
            <returns>BcfValidatorSetup.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.AddValidator(System.Type)">
            <summary>
            Adds a new validator to the <see cref="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.Validators"/> collection and returns the new associated <see cref="T:CalculationWorks.NonCommercial.BusinessModel.Design.BcfValidatorSetup"/>
            </summary>
            <param name="validatorType">Type of the validator.</param>
            <returns>BcfValidatorSetup.</returns>
            <exception cref="T:System.ArgumentNullException">validatorType</exception>
            <exception cref="T:System.ArgumentException"><c>validatorType</c> default constructor not found</exception>
            <exception cref="T:System.ArgumentException"><c>validatorType</c> is not a subclass of <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/></exception>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.Columns">
            <summary>
            Gets the column collection
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.Validators">
            <summary>
            Gets the validators
            </summary>
            <value>The validators.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.BehaviorItems">
            <summary>
            Gets the behavior items.
            </summary>
            <value>The behavior items.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.DataSetSetup">
            <summary>
            Gets the BcfDataSet setup.
            </summary>
            <value>The BcfDataSet setup.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.Design.BcfTableSetup.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultUpdated">
            <summary>
            Class stores information about an validation result update action. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultUpdated.DataSet">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/> the item belongs to.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfDataSet"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultUpdated.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemValidationResultUpdated.OldResult">
            <summary>
            Gets the old result.
            </summary>
            <value>The old result.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoCollection">
            <summary>
            Represents the compensation event store of a transaction.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoCollection.Items">
            <summary>
            Gets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowAdded">
            <summary>
            Class stores information about an child row add action. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowAdded.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowAdded.RelatedRow">
            <summary>
            Gets the related row.
            </summary>
            <value>The related row.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowRemoved">
            <summary>
            Class stores information about an child row remove action.. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowRemoved.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowRemoved.RelatedRow">
            <summary>
            Gets the related row.
            </summary>
            <value>The related row.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowSet">
            <summary>
            Class stores information about a parent row set action.. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowSet.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowSet.NewRelatedRow">
            <summary>
            Gets the new related row.
            </summary>
            <value>The new related row.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRelatedRowSet.OldRelatedRow">
            <summary>
            Gets the old related row.
            </summary>
            <value>The old related row.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRowAdded">
            <summary>
            Class stores information about an row add action. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRowAdded.Row">
            <summary>
            Gets the row.
            </summary>
            <value>The row.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRowDeleted">
            <summary>
            Class stores information about a row delete action. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemRowDeleted.Row">
            <summary>
            Gets the row.
            </summary>
            <value>The row.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemSetValue">
            <summary>
            Class stores information about an cell value update. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemSetValue.Cell">
            <summary>
            Gets the cell.
            </summary>
            <value>The cell.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemSetValue.NewValue">
            <summary>
            Gets the new value.
            </summary>
            <value>The new value.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.UndoRedo.BcfUndoRedoItemSetValue.OldValue">
            <summary>
            Gets the old value.
            </summary>
            <value>The old value.</value>
        </member>
        <member name="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell">
            <summary>
            Represents a validation cell. This class cannot be inherited.
            </summary>
            <remarks>
            A coordinate of a validator and a row.
            </remarks>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell.ValidatingRow">
            <summary>
            Gets the validating <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/>.
            </summary>
            <value>The validating <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfRow"/>.</value>
        </member>
        <member name="P:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorCell.Validator">
            <summary>
            Gets the <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/>.
            </summary>
            <value>The <see cref="T:CalculationWorks.NonCommercial.BusinessModel.BcfValidatorBase"/>.</value>
        </member>
    </members>
</doc>
